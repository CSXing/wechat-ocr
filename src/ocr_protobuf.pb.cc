// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ocr_protobuf.proto

#include "ocr_protobuf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ocr_protobuf {
PROTOBUF_CONSTEXPR OcrResponse_OcrResult_ResultPos_PosXY::OcrResponse_OcrResult_ResultPos_PosXY(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OcrResponse_OcrResult_ResultPos_PosXYDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OcrResponse_OcrResult_ResultPos_PosXYDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OcrResponse_OcrResult_ResultPos_PosXYDefaultTypeInternal() {}
  union {
    OcrResponse_OcrResult_ResultPos_PosXY _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OcrResponse_OcrResult_ResultPos_PosXYDefaultTypeInternal _OcrResponse_OcrResult_ResultPos_PosXY_default_instance_;
PROTOBUF_CONSTEXPR OcrResponse_OcrResult_ResultPos::OcrResponse_OcrResult_ResultPos(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pos_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OcrResponse_OcrResult_ResultPosDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OcrResponse_OcrResult_ResultPosDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OcrResponse_OcrResult_ResultPosDefaultTypeInternal() {}
  union {
    OcrResponse_OcrResult_ResultPos _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OcrResponse_OcrResult_ResultPosDefaultTypeInternal _OcrResponse_OcrResult_ResultPos_default_instance_;
PROTOBUF_CONSTEXPR OcrResponse_OcrResult_SingleResult_OneResult::OcrResponse_OcrResult_SingleResult_OneResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.one_str_utf8_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.one_pos_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OcrResponse_OcrResult_SingleResult_OneResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OcrResponse_OcrResult_SingleResult_OneResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OcrResponse_OcrResult_SingleResult_OneResultDefaultTypeInternal() {}
  union {
    OcrResponse_OcrResult_SingleResult_OneResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OcrResponse_OcrResult_SingleResult_OneResultDefaultTypeInternal _OcrResponse_OcrResult_SingleResult_OneResult_default_instance_;
PROTOBUF_CONSTEXPR OcrResponse_OcrResult_SingleResult::OcrResponse_OcrResult_SingleResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.one_result_)*/{}
  , /*decltype(_impl_.single_str_utf8_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.single_pos_)*/nullptr
  , /*decltype(_impl_.unknown_pos_)*/nullptr
  , /*decltype(_impl_.single_rate_)*/0
  , /*decltype(_impl_.left_)*/0
  , /*decltype(_impl_.top_)*/0
  , /*decltype(_impl_.right_)*/0
  , /*decltype(_impl_.bottom_)*/0
  , /*decltype(_impl_.unknown_0_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OcrResponse_OcrResult_SingleResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OcrResponse_OcrResult_SingleResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OcrResponse_OcrResult_SingleResultDefaultTypeInternal() {}
  union {
    OcrResponse_OcrResult_SingleResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OcrResponse_OcrResult_SingleResultDefaultTypeInternal _OcrResponse_OcrResult_SingleResult_default_instance_;
PROTOBUF_CONSTEXPR OcrResponse_OcrResult::OcrResponse_OcrResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.single_result_)*/{}
  , /*decltype(_impl_.unknown_1_)*/0
  , /*decltype(_impl_.unknown_2_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OcrResponse_OcrResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OcrResponse_OcrResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OcrResponse_OcrResultDefaultTypeInternal() {}
  union {
    OcrResponse_OcrResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OcrResponse_OcrResultDefaultTypeInternal _OcrResponse_OcrResult_default_instance_;
PROTOBUF_CONSTEXPR OcrResponse::OcrResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ocr_result_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.task_id_)*/0
  , /*decltype(_impl_.err_code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OcrResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OcrResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OcrResponseDefaultTypeInternal() {}
  union {
    OcrResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OcrResponseDefaultTypeInternal _OcrResponse_default_instance_;
PROTOBUF_CONSTEXPR OcrRequest_PicPaths::OcrRequest_PicPaths(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pic_path_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OcrRequest_PicPathsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OcrRequest_PicPathsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OcrRequest_PicPathsDefaultTypeInternal() {}
  union {
    OcrRequest_PicPaths _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OcrRequest_PicPathsDefaultTypeInternal _OcrRequest_PicPaths_default_instance_;
PROTOBUF_CONSTEXPR OcrRequest::OcrRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pic_path_)*/nullptr
  , /*decltype(_impl_.unknow_)*/0
  , /*decltype(_impl_.task_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OcrRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OcrRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OcrRequestDefaultTypeInternal() {}
  union {
    OcrRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OcrRequestDefaultTypeInternal _OcrRequest_default_instance_;
}  // namespace ocr_protobuf
namespace ocr_protobuf {

// ===================================================================

class OcrResponse_OcrResult_ResultPos_PosXY::_Internal {
 public:
};

OcrResponse_OcrResult_ResultPos_PosXY::OcrResponse_OcrResult_ResultPos_PosXY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY)
}
OcrResponse_OcrResult_ResultPos_PosXY::OcrResponse_OcrResult_ResultPos_PosXY(const OcrResponse_OcrResult_ResultPos_PosXY& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  OcrResponse_OcrResult_ResultPos_PosXY* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY)
}

inline void OcrResponse_OcrResult_ResultPos_PosXY::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OcrResponse_OcrResult_ResultPos_PosXY::~OcrResponse_OcrResult_ResultPos_PosXY() {
  // @@protoc_insertion_point(destructor:ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OcrResponse_OcrResult_ResultPos_PosXY::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OcrResponse_OcrResult_ResultPos_PosXY::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OcrResponse_OcrResult_ResultPos_PosXY::Clear() {
// @@protoc_insertion_point(message_clear_start:ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<std::string>();
}

const char* OcrResponse_OcrResult_ResultPos_PosXY::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OcrResponse_OcrResult_ResultPos_PosXY::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY)
  return target;
}

size_t OcrResponse_OcrResult_ResultPos_PosXY::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OcrResponse_OcrResult_ResultPos_PosXY::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const OcrResponse_OcrResult_ResultPos_PosXY*>(
      &from));
}

void OcrResponse_OcrResult_ResultPos_PosXY::MergeFrom(const OcrResponse_OcrResult_ResultPos_PosXY& from) {
  OcrResponse_OcrResult_ResultPos_PosXY* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void OcrResponse_OcrResult_ResultPos_PosXY::CopyFrom(const OcrResponse_OcrResult_ResultPos_PosXY& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OcrResponse_OcrResult_ResultPos_PosXY::IsInitialized() const {
  return true;
}

void OcrResponse_OcrResult_ResultPos_PosXY::InternalSwap(OcrResponse_OcrResult_ResultPos_PosXY* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OcrResponse_OcrResult_ResultPos_PosXY, _impl_.y_)
      + sizeof(OcrResponse_OcrResult_ResultPos_PosXY::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(OcrResponse_OcrResult_ResultPos_PosXY, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

std::string OcrResponse_OcrResult_ResultPos_PosXY::GetTypeName() const {
  return "ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY";
}


// ===================================================================

class OcrResponse_OcrResult_ResultPos::_Internal {
 public:
};

OcrResponse_OcrResult_ResultPos::OcrResponse_OcrResult_ResultPos(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ocr_protobuf.OcrResponse.OcrResult.ResultPos)
}
OcrResponse_OcrResult_ResultPos::OcrResponse_OcrResult_ResultPos(const OcrResponse_OcrResult_ResultPos& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  OcrResponse_OcrResult_ResultPos* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){from._impl_.pos_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ocr_protobuf.OcrResponse.OcrResult.ResultPos)
}

inline void OcrResponse_OcrResult_ResultPos::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OcrResponse_OcrResult_ResultPos::~OcrResponse_OcrResult_ResultPos() {
  // @@protoc_insertion_point(destructor:ocr_protobuf.OcrResponse.OcrResult.ResultPos)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OcrResponse_OcrResult_ResultPos::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pos_.~RepeatedPtrField();
}

void OcrResponse_OcrResult_ResultPos::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OcrResponse_OcrResult_ResultPos::Clear() {
// @@protoc_insertion_point(message_clear_start:ocr_protobuf.OcrResponse.OcrResult.ResultPos)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pos_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* OcrResponse_OcrResult_ResultPos::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OcrResponse_OcrResult_ResultPos::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ocr_protobuf.OcrResponse.OcrResult.ResultPos)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY pos = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pos_size()); i < n; i++) {
    const auto& repfield = this->_internal_pos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ocr_protobuf.OcrResponse.OcrResult.ResultPos)
  return target;
}

size_t OcrResponse_OcrResult_ResultPos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ocr_protobuf.OcrResponse.OcrResult.ResultPos)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY pos = 1;
  total_size += 1UL * this->_internal_pos_size();
  for (const auto& msg : this->_impl_.pos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OcrResponse_OcrResult_ResultPos::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const OcrResponse_OcrResult_ResultPos*>(
      &from));
}

void OcrResponse_OcrResult_ResultPos::MergeFrom(const OcrResponse_OcrResult_ResultPos& from) {
  OcrResponse_OcrResult_ResultPos* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:ocr_protobuf.OcrResponse.OcrResult.ResultPos)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pos_.MergeFrom(from._impl_.pos_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void OcrResponse_OcrResult_ResultPos::CopyFrom(const OcrResponse_OcrResult_ResultPos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ocr_protobuf.OcrResponse.OcrResult.ResultPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OcrResponse_OcrResult_ResultPos::IsInitialized() const {
  return true;
}

void OcrResponse_OcrResult_ResultPos::InternalSwap(OcrResponse_OcrResult_ResultPos* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.pos_.InternalSwap(&other->_impl_.pos_);
}

std::string OcrResponse_OcrResult_ResultPos::GetTypeName() const {
  return "ocr_protobuf.OcrResponse.OcrResult.ResultPos";
}


// ===================================================================

class OcrResponse_OcrResult_SingleResult_OneResult::_Internal {
 public:
  static const ::ocr_protobuf::OcrResponse_OcrResult_ResultPos& one_pos(const OcrResponse_OcrResult_SingleResult_OneResult* msg);
};

const ::ocr_protobuf::OcrResponse_OcrResult_ResultPos&
OcrResponse_OcrResult_SingleResult_OneResult::_Internal::one_pos(const OcrResponse_OcrResult_SingleResult_OneResult* msg) {
  return *msg->_impl_.one_pos_;
}
OcrResponse_OcrResult_SingleResult_OneResult::OcrResponse_OcrResult_SingleResult_OneResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult)
}
OcrResponse_OcrResult_SingleResult_OneResult::OcrResponse_OcrResult_SingleResult_OneResult(const OcrResponse_OcrResult_SingleResult_OneResult& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  OcrResponse_OcrResult_SingleResult_OneResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.one_str_utf8_){}
    , decltype(_impl_.one_pos_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.one_str_utf8_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.one_str_utf8_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_one_str_utf8().empty()) {
    _this->_impl_.one_str_utf8_.Set(from._internal_one_str_utf8(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_one_pos()) {
    _this->_impl_.one_pos_ = new ::ocr_protobuf::OcrResponse_OcrResult_ResultPos(*from._impl_.one_pos_);
  }
  // @@protoc_insertion_point(copy_constructor:ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult)
}

inline void OcrResponse_OcrResult_SingleResult_OneResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.one_str_utf8_){}
    , decltype(_impl_.one_pos_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.one_str_utf8_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.one_str_utf8_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OcrResponse_OcrResult_SingleResult_OneResult::~OcrResponse_OcrResult_SingleResult_OneResult() {
  // @@protoc_insertion_point(destructor:ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OcrResponse_OcrResult_SingleResult_OneResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.one_str_utf8_.Destroy();
  if (this != internal_default_instance()) delete _impl_.one_pos_;
}

void OcrResponse_OcrResult_SingleResult_OneResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OcrResponse_OcrResult_SingleResult_OneResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.one_str_utf8_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.one_pos_ != nullptr) {
    delete _impl_.one_pos_;
  }
  _impl_.one_pos_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* OcrResponse_OcrResult_SingleResult_OneResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ocr_protobuf.OcrResponse.OcrResult.ResultPos one_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_one_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes one_str_utf8 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_one_str_utf8();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OcrResponse_OcrResult_SingleResult_OneResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ocr_protobuf.OcrResponse.OcrResult.ResultPos one_pos = 1;
  if (this->_internal_has_one_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::one_pos(this),
        _Internal::one_pos(this).GetCachedSize(), target, stream);
  }

  // bytes one_str_utf8 = 2;
  if (!this->_internal_one_str_utf8().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_one_str_utf8(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult)
  return target;
}

size_t OcrResponse_OcrResult_SingleResult_OneResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes one_str_utf8 = 2;
  if (!this->_internal_one_str_utf8().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_one_str_utf8());
  }

  // .ocr_protobuf.OcrResponse.OcrResult.ResultPos one_pos = 1;
  if (this->_internal_has_one_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.one_pos_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OcrResponse_OcrResult_SingleResult_OneResult::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const OcrResponse_OcrResult_SingleResult_OneResult*>(
      &from));
}

void OcrResponse_OcrResult_SingleResult_OneResult::MergeFrom(const OcrResponse_OcrResult_SingleResult_OneResult& from) {
  OcrResponse_OcrResult_SingleResult_OneResult* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_one_str_utf8().empty()) {
    _this->_internal_set_one_str_utf8(from._internal_one_str_utf8());
  }
  if (from._internal_has_one_pos()) {
    _this->_internal_mutable_one_pos()->::ocr_protobuf::OcrResponse_OcrResult_ResultPos::MergeFrom(
        from._internal_one_pos());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void OcrResponse_OcrResult_SingleResult_OneResult::CopyFrom(const OcrResponse_OcrResult_SingleResult_OneResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OcrResponse_OcrResult_SingleResult_OneResult::IsInitialized() const {
  return true;
}

void OcrResponse_OcrResult_SingleResult_OneResult::InternalSwap(OcrResponse_OcrResult_SingleResult_OneResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.one_str_utf8_, lhs_arena,
      &other->_impl_.one_str_utf8_, rhs_arena
  );
  swap(_impl_.one_pos_, other->_impl_.one_pos_);
}

std::string OcrResponse_OcrResult_SingleResult_OneResult::GetTypeName() const {
  return "ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult";
}


// ===================================================================

class OcrResponse_OcrResult_SingleResult::_Internal {
 public:
  static const ::ocr_protobuf::OcrResponse_OcrResult_ResultPos& single_pos(const OcrResponse_OcrResult_SingleResult* msg);
  static const ::ocr_protobuf::OcrResponse_OcrResult_ResultPos& unknown_pos(const OcrResponse_OcrResult_SingleResult* msg);
};

const ::ocr_protobuf::OcrResponse_OcrResult_ResultPos&
OcrResponse_OcrResult_SingleResult::_Internal::single_pos(const OcrResponse_OcrResult_SingleResult* msg) {
  return *msg->_impl_.single_pos_;
}
const ::ocr_protobuf::OcrResponse_OcrResult_ResultPos&
OcrResponse_OcrResult_SingleResult::_Internal::unknown_pos(const OcrResponse_OcrResult_SingleResult* msg) {
  return *msg->_impl_.unknown_pos_;
}
OcrResponse_OcrResult_SingleResult::OcrResponse_OcrResult_SingleResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ocr_protobuf.OcrResponse.OcrResult.SingleResult)
}
OcrResponse_OcrResult_SingleResult::OcrResponse_OcrResult_SingleResult(const OcrResponse_OcrResult_SingleResult& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  OcrResponse_OcrResult_SingleResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.one_result_){from._impl_.one_result_}
    , decltype(_impl_.single_str_utf8_){}
    , decltype(_impl_.single_pos_){nullptr}
    , decltype(_impl_.unknown_pos_){nullptr}
    , decltype(_impl_.single_rate_){}
    , decltype(_impl_.left_){}
    , decltype(_impl_.top_){}
    , decltype(_impl_.right_){}
    , decltype(_impl_.bottom_){}
    , decltype(_impl_.unknown_0_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.single_str_utf8_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.single_str_utf8_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_single_str_utf8().empty()) {
    _this->_impl_.single_str_utf8_.Set(from._internal_single_str_utf8(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_single_pos()) {
    _this->_impl_.single_pos_ = new ::ocr_protobuf::OcrResponse_OcrResult_ResultPos(*from._impl_.single_pos_);
  }
  if (from._internal_has_unknown_pos()) {
    _this->_impl_.unknown_pos_ = new ::ocr_protobuf::OcrResponse_OcrResult_ResultPos(*from._impl_.unknown_pos_);
  }
  ::memcpy(&_impl_.single_rate_, &from._impl_.single_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.unknown_0_) -
    reinterpret_cast<char*>(&_impl_.single_rate_)) + sizeof(_impl_.unknown_0_));
  // @@protoc_insertion_point(copy_constructor:ocr_protobuf.OcrResponse.OcrResult.SingleResult)
}

inline void OcrResponse_OcrResult_SingleResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.one_result_){arena}
    , decltype(_impl_.single_str_utf8_){}
    , decltype(_impl_.single_pos_){nullptr}
    , decltype(_impl_.unknown_pos_){nullptr}
    , decltype(_impl_.single_rate_){0}
    , decltype(_impl_.left_){0}
    , decltype(_impl_.top_){0}
    , decltype(_impl_.right_){0}
    , decltype(_impl_.bottom_){0}
    , decltype(_impl_.unknown_0_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.single_str_utf8_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.single_str_utf8_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OcrResponse_OcrResult_SingleResult::~OcrResponse_OcrResult_SingleResult() {
  // @@protoc_insertion_point(destructor:ocr_protobuf.OcrResponse.OcrResult.SingleResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OcrResponse_OcrResult_SingleResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.one_result_.~RepeatedPtrField();
  _impl_.single_str_utf8_.Destroy();
  if (this != internal_default_instance()) delete _impl_.single_pos_;
  if (this != internal_default_instance()) delete _impl_.unknown_pos_;
}

void OcrResponse_OcrResult_SingleResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OcrResponse_OcrResult_SingleResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ocr_protobuf.OcrResponse.OcrResult.SingleResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.one_result_.Clear();
  _impl_.single_str_utf8_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.single_pos_ != nullptr) {
    delete _impl_.single_pos_;
  }
  _impl_.single_pos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.unknown_pos_ != nullptr) {
    delete _impl_.unknown_pos_;
  }
  _impl_.unknown_pos_ = nullptr;
  ::memset(&_impl_.single_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.unknown_0_) -
      reinterpret_cast<char*>(&_impl_.single_rate_)) + sizeof(_impl_.unknown_0_));
  _internal_metadata_.Clear<std::string>();
}

const char* OcrResponse_OcrResult_SingleResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ocr_protobuf.OcrResponse.OcrResult.ResultPos single_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_single_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes single_str_utf8 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_single_str_utf8();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float single_rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.single_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated .ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult one_result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_one_result(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // float left = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float top = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.top_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float right = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float bottom = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.bottom_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 unknown_0 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.unknown_0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ocr_protobuf.OcrResponse.OcrResult.ResultPos unknown_pos = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_unknown_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OcrResponse_OcrResult_SingleResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ocr_protobuf.OcrResponse.OcrResult.SingleResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ocr_protobuf.OcrResponse.OcrResult.ResultPos single_pos = 1;
  if (this->_internal_has_single_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::single_pos(this),
        _Internal::single_pos(this).GetCachedSize(), target, stream);
  }

  // bytes single_str_utf8 = 2;
  if (!this->_internal_single_str_utf8().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_single_str_utf8(), target);
  }

  // float single_rate = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_single_rate = this->_internal_single_rate();
  uint32_t raw_single_rate;
  memcpy(&raw_single_rate, &tmp_single_rate, sizeof(tmp_single_rate));
  if (raw_single_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_single_rate(), target);
  }

  // repeated .ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult one_result = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_one_result_size()); i < n; i++) {
    const auto& repfield = this->_internal_one_result(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // float left = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_left = this->_internal_left();
  uint32_t raw_left;
  memcpy(&raw_left, &tmp_left, sizeof(tmp_left));
  if (raw_left != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_left(), target);
  }

  // float top = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_top = this->_internal_top();
  uint32_t raw_top;
  memcpy(&raw_top, &tmp_top, sizeof(tmp_top));
  if (raw_top != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_top(), target);
  }

  // float right = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_right = this->_internal_right();
  uint32_t raw_right;
  memcpy(&raw_right, &tmp_right, sizeof(tmp_right));
  if (raw_right != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_right(), target);
  }

  // float bottom = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bottom = this->_internal_bottom();
  uint32_t raw_bottom;
  memcpy(&raw_bottom, &tmp_bottom, sizeof(tmp_bottom));
  if (raw_bottom != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_bottom(), target);
  }

  // int32 unknown_0 = 9;
  if (this->_internal_unknown_0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_unknown_0(), target);
  }

  // .ocr_protobuf.OcrResponse.OcrResult.ResultPos unknown_pos = 10;
  if (this->_internal_has_unknown_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::unknown_pos(this),
        _Internal::unknown_pos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ocr_protobuf.OcrResponse.OcrResult.SingleResult)
  return target;
}

size_t OcrResponse_OcrResult_SingleResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ocr_protobuf.OcrResponse.OcrResult.SingleResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult one_result = 4;
  total_size += 1UL * this->_internal_one_result_size();
  for (const auto& msg : this->_impl_.one_result_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes single_str_utf8 = 2;
  if (!this->_internal_single_str_utf8().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_single_str_utf8());
  }

  // .ocr_protobuf.OcrResponse.OcrResult.ResultPos single_pos = 1;
  if (this->_internal_has_single_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.single_pos_);
  }

  // .ocr_protobuf.OcrResponse.OcrResult.ResultPos unknown_pos = 10;
  if (this->_internal_has_unknown_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.unknown_pos_);
  }

  // float single_rate = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_single_rate = this->_internal_single_rate();
  uint32_t raw_single_rate;
  memcpy(&raw_single_rate, &tmp_single_rate, sizeof(tmp_single_rate));
  if (raw_single_rate != 0) {
    total_size += 1 + 4;
  }

  // float left = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_left = this->_internal_left();
  uint32_t raw_left;
  memcpy(&raw_left, &tmp_left, sizeof(tmp_left));
  if (raw_left != 0) {
    total_size += 1 + 4;
  }

  // float top = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_top = this->_internal_top();
  uint32_t raw_top;
  memcpy(&raw_top, &tmp_top, sizeof(tmp_top));
  if (raw_top != 0) {
    total_size += 1 + 4;
  }

  // float right = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_right = this->_internal_right();
  uint32_t raw_right;
  memcpy(&raw_right, &tmp_right, sizeof(tmp_right));
  if (raw_right != 0) {
    total_size += 1 + 4;
  }

  // float bottom = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bottom = this->_internal_bottom();
  uint32_t raw_bottom;
  memcpy(&raw_bottom, &tmp_bottom, sizeof(tmp_bottom));
  if (raw_bottom != 0) {
    total_size += 1 + 4;
  }

  // int32 unknown_0 = 9;
  if (this->_internal_unknown_0() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_unknown_0());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OcrResponse_OcrResult_SingleResult::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const OcrResponse_OcrResult_SingleResult*>(
      &from));
}

void OcrResponse_OcrResult_SingleResult::MergeFrom(const OcrResponse_OcrResult_SingleResult& from) {
  OcrResponse_OcrResult_SingleResult* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:ocr_protobuf.OcrResponse.OcrResult.SingleResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.one_result_.MergeFrom(from._impl_.one_result_);
  if (!from._internal_single_str_utf8().empty()) {
    _this->_internal_set_single_str_utf8(from._internal_single_str_utf8());
  }
  if (from._internal_has_single_pos()) {
    _this->_internal_mutable_single_pos()->::ocr_protobuf::OcrResponse_OcrResult_ResultPos::MergeFrom(
        from._internal_single_pos());
  }
  if (from._internal_has_unknown_pos()) {
    _this->_internal_mutable_unknown_pos()->::ocr_protobuf::OcrResponse_OcrResult_ResultPos::MergeFrom(
        from._internal_unknown_pos());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_single_rate = from._internal_single_rate();
  uint32_t raw_single_rate;
  memcpy(&raw_single_rate, &tmp_single_rate, sizeof(tmp_single_rate));
  if (raw_single_rate != 0) {
    _this->_internal_set_single_rate(from._internal_single_rate());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_left = from._internal_left();
  uint32_t raw_left;
  memcpy(&raw_left, &tmp_left, sizeof(tmp_left));
  if (raw_left != 0) {
    _this->_internal_set_left(from._internal_left());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_top = from._internal_top();
  uint32_t raw_top;
  memcpy(&raw_top, &tmp_top, sizeof(tmp_top));
  if (raw_top != 0) {
    _this->_internal_set_top(from._internal_top());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_right = from._internal_right();
  uint32_t raw_right;
  memcpy(&raw_right, &tmp_right, sizeof(tmp_right));
  if (raw_right != 0) {
    _this->_internal_set_right(from._internal_right());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bottom = from._internal_bottom();
  uint32_t raw_bottom;
  memcpy(&raw_bottom, &tmp_bottom, sizeof(tmp_bottom));
  if (raw_bottom != 0) {
    _this->_internal_set_bottom(from._internal_bottom());
  }
  if (from._internal_unknown_0() != 0) {
    _this->_internal_set_unknown_0(from._internal_unknown_0());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void OcrResponse_OcrResult_SingleResult::CopyFrom(const OcrResponse_OcrResult_SingleResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ocr_protobuf.OcrResponse.OcrResult.SingleResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OcrResponse_OcrResult_SingleResult::IsInitialized() const {
  return true;
}

void OcrResponse_OcrResult_SingleResult::InternalSwap(OcrResponse_OcrResult_SingleResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.one_result_.InternalSwap(&other->_impl_.one_result_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.single_str_utf8_, lhs_arena,
      &other->_impl_.single_str_utf8_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OcrResponse_OcrResult_SingleResult, _impl_.unknown_0_)
      + sizeof(OcrResponse_OcrResult_SingleResult::_impl_.unknown_0_)
      - PROTOBUF_FIELD_OFFSET(OcrResponse_OcrResult_SingleResult, _impl_.single_pos_)>(
          reinterpret_cast<char*>(&_impl_.single_pos_),
          reinterpret_cast<char*>(&other->_impl_.single_pos_));
}

std::string OcrResponse_OcrResult_SingleResult::GetTypeName() const {
  return "ocr_protobuf.OcrResponse.OcrResult.SingleResult";
}


// ===================================================================

class OcrResponse_OcrResult::_Internal {
 public:
};

OcrResponse_OcrResult::OcrResponse_OcrResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ocr_protobuf.OcrResponse.OcrResult)
}
OcrResponse_OcrResult::OcrResponse_OcrResult(const OcrResponse_OcrResult& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  OcrResponse_OcrResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.single_result_){from._impl_.single_result_}
    , decltype(_impl_.unknown_1_){}
    , decltype(_impl_.unknown_2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.unknown_1_, &from._impl_.unknown_1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.unknown_2_) -
    reinterpret_cast<char*>(&_impl_.unknown_1_)) + sizeof(_impl_.unknown_2_));
  // @@protoc_insertion_point(copy_constructor:ocr_protobuf.OcrResponse.OcrResult)
}

inline void OcrResponse_OcrResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.single_result_){arena}
    , decltype(_impl_.unknown_1_){0}
    , decltype(_impl_.unknown_2_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OcrResponse_OcrResult::~OcrResponse_OcrResult() {
  // @@protoc_insertion_point(destructor:ocr_protobuf.OcrResponse.OcrResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OcrResponse_OcrResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.single_result_.~RepeatedPtrField();
}

void OcrResponse_OcrResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OcrResponse_OcrResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ocr_protobuf.OcrResponse.OcrResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.single_result_.Clear();
  ::memset(&_impl_.unknown_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.unknown_2_) -
      reinterpret_cast<char*>(&_impl_.unknown_1_)) + sizeof(_impl_.unknown_2_));
  _internal_metadata_.Clear<std::string>();
}

const char* OcrResponse_OcrResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ocr_protobuf.OcrResponse.OcrResult.SingleResult single_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_single_result(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 unknown_1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.unknown_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 unknown_2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.unknown_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OcrResponse_OcrResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ocr_protobuf.OcrResponse.OcrResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ocr_protobuf.OcrResponse.OcrResult.SingleResult single_result = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_single_result_size()); i < n; i++) {
    const auto& repfield = this->_internal_single_result(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 unknown_1 = 2;
  if (this->_internal_unknown_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_unknown_1(), target);
  }

  // int32 unknown_2 = 3;
  if (this->_internal_unknown_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_unknown_2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ocr_protobuf.OcrResponse.OcrResult)
  return target;
}

size_t OcrResponse_OcrResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ocr_protobuf.OcrResponse.OcrResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ocr_protobuf.OcrResponse.OcrResult.SingleResult single_result = 1;
  total_size += 1UL * this->_internal_single_result_size();
  for (const auto& msg : this->_impl_.single_result_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 unknown_1 = 2;
  if (this->_internal_unknown_1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_unknown_1());
  }

  // int32 unknown_2 = 3;
  if (this->_internal_unknown_2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_unknown_2());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OcrResponse_OcrResult::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const OcrResponse_OcrResult*>(
      &from));
}

void OcrResponse_OcrResult::MergeFrom(const OcrResponse_OcrResult& from) {
  OcrResponse_OcrResult* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:ocr_protobuf.OcrResponse.OcrResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.single_result_.MergeFrom(from._impl_.single_result_);
  if (from._internal_unknown_1() != 0) {
    _this->_internal_set_unknown_1(from._internal_unknown_1());
  }
  if (from._internal_unknown_2() != 0) {
    _this->_internal_set_unknown_2(from._internal_unknown_2());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void OcrResponse_OcrResult::CopyFrom(const OcrResponse_OcrResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ocr_protobuf.OcrResponse.OcrResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OcrResponse_OcrResult::IsInitialized() const {
  return true;
}

void OcrResponse_OcrResult::InternalSwap(OcrResponse_OcrResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.single_result_.InternalSwap(&other->_impl_.single_result_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OcrResponse_OcrResult, _impl_.unknown_2_)
      + sizeof(OcrResponse_OcrResult::_impl_.unknown_2_)
      - PROTOBUF_FIELD_OFFSET(OcrResponse_OcrResult, _impl_.unknown_1_)>(
          reinterpret_cast<char*>(&_impl_.unknown_1_),
          reinterpret_cast<char*>(&other->_impl_.unknown_1_));
}

std::string OcrResponse_OcrResult::GetTypeName() const {
  return "ocr_protobuf.OcrResponse.OcrResult";
}


// ===================================================================

class OcrResponse::_Internal {
 public:
  static const ::ocr_protobuf::OcrResponse_OcrResult& ocr_result(const OcrResponse* msg);
};

const ::ocr_protobuf::OcrResponse_OcrResult&
OcrResponse::_Internal::ocr_result(const OcrResponse* msg) {
  return *msg->_impl_.ocr_result_;
}
OcrResponse::OcrResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ocr_protobuf.OcrResponse)
}
OcrResponse::OcrResponse(const OcrResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  OcrResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ocr_result_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.task_id_){}
    , decltype(_impl_.err_code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_ocr_result()) {
    _this->_impl_.ocr_result_ = new ::ocr_protobuf::OcrResponse_OcrResult(*from._impl_.ocr_result_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.err_code_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.err_code_));
  // @@protoc_insertion_point(copy_constructor:ocr_protobuf.OcrResponse)
}

inline void OcrResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ocr_result_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.task_id_){0}
    , decltype(_impl_.err_code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OcrResponse::~OcrResponse() {
  // @@protoc_insertion_point(destructor:ocr_protobuf.OcrResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OcrResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.ocr_result_;
}

void OcrResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OcrResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ocr_protobuf.OcrResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.ocr_result_ != nullptr) {
    delete _impl_.ocr_result_;
  }
  _impl_.ocr_result_ = nullptr;
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.err_code_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.err_code_));
  _internal_metadata_.Clear<std::string>();
}

const char* OcrResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 task_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.task_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 err_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.err_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ocr_protobuf.OcrResponse.OcrResult ocr_result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ocr_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OcrResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ocr_protobuf.OcrResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // int32 task_id = 2;
  if (this->_internal_task_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_task_id(), target);
  }

  // int32 err_code = 3;
  if (this->_internal_err_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_err_code(), target);
  }

  // .ocr_protobuf.OcrResponse.OcrResult ocr_result = 4;
  if (this->_internal_has_ocr_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::ocr_result(this),
        _Internal::ocr_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ocr_protobuf.OcrResponse)
  return target;
}

size_t OcrResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ocr_protobuf.OcrResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ocr_protobuf.OcrResponse.OcrResult ocr_result = 4;
  if (this->_internal_has_ocr_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ocr_result_);
  }

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // int32 task_id = 2;
  if (this->_internal_task_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_task_id());
  }

  // int32 err_code = 3;
  if (this->_internal_err_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_err_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OcrResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const OcrResponse*>(
      &from));
}

void OcrResponse::MergeFrom(const OcrResponse& from) {
  OcrResponse* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:ocr_protobuf.OcrResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ocr_result()) {
    _this->_internal_mutable_ocr_result()->::ocr_protobuf::OcrResponse_OcrResult::MergeFrom(
        from._internal_ocr_result());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_task_id() != 0) {
    _this->_internal_set_task_id(from._internal_task_id());
  }
  if (from._internal_err_code() != 0) {
    _this->_internal_set_err_code(from._internal_err_code());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void OcrResponse::CopyFrom(const OcrResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ocr_protobuf.OcrResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OcrResponse::IsInitialized() const {
  return true;
}

void OcrResponse::InternalSwap(OcrResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OcrResponse, _impl_.err_code_)
      + sizeof(OcrResponse::_impl_.err_code_)
      - PROTOBUF_FIELD_OFFSET(OcrResponse, _impl_.ocr_result_)>(
          reinterpret_cast<char*>(&_impl_.ocr_result_),
          reinterpret_cast<char*>(&other->_impl_.ocr_result_));
}

std::string OcrResponse::GetTypeName() const {
  return "ocr_protobuf.OcrResponse";
}


// ===================================================================

class OcrRequest_PicPaths::_Internal {
 public:
};

OcrRequest_PicPaths::OcrRequest_PicPaths(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ocr_protobuf.OcrRequest.PicPaths)
}
OcrRequest_PicPaths::OcrRequest_PicPaths(const OcrRequest_PicPaths& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  OcrRequest_PicPaths* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pic_path_){from._impl_.pic_path_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ocr_protobuf.OcrRequest.PicPaths)
}

inline void OcrRequest_PicPaths::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pic_path_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OcrRequest_PicPaths::~OcrRequest_PicPaths() {
  // @@protoc_insertion_point(destructor:ocr_protobuf.OcrRequest.PicPaths)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OcrRequest_PicPaths::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pic_path_.~RepeatedPtrField();
}

void OcrRequest_PicPaths::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OcrRequest_PicPaths::Clear() {
// @@protoc_insertion_point(message_clear_start:ocr_protobuf.OcrRequest.PicPaths)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pic_path_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* OcrRequest_PicPaths::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string pic_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_pic_path();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, nullptr));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OcrRequest_PicPaths::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ocr_protobuf.OcrRequest.PicPaths)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string pic_path = 1;
  for (int i = 0, n = this->_internal_pic_path_size(); i < n; i++) {
    const auto& s = this->_internal_pic_path(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ocr_protobuf.OcrRequest.PicPaths.pic_path");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ocr_protobuf.OcrRequest.PicPaths)
  return target;
}

size_t OcrRequest_PicPaths::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ocr_protobuf.OcrRequest.PicPaths)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string pic_path = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.pic_path_.size());
  for (int i = 0, n = _impl_.pic_path_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.pic_path_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OcrRequest_PicPaths::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const OcrRequest_PicPaths*>(
      &from));
}

void OcrRequest_PicPaths::MergeFrom(const OcrRequest_PicPaths& from) {
  OcrRequest_PicPaths* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:ocr_protobuf.OcrRequest.PicPaths)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pic_path_.MergeFrom(from._impl_.pic_path_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void OcrRequest_PicPaths::CopyFrom(const OcrRequest_PicPaths& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ocr_protobuf.OcrRequest.PicPaths)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OcrRequest_PicPaths::IsInitialized() const {
  return true;
}

void OcrRequest_PicPaths::InternalSwap(OcrRequest_PicPaths* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.pic_path_.InternalSwap(&other->_impl_.pic_path_);
}

std::string OcrRequest_PicPaths::GetTypeName() const {
  return "ocr_protobuf.OcrRequest.PicPaths";
}


// ===================================================================

class OcrRequest::_Internal {
 public:
  static const ::ocr_protobuf::OcrRequest_PicPaths& pic_path(const OcrRequest* msg);
};

const ::ocr_protobuf::OcrRequest_PicPaths&
OcrRequest::_Internal::pic_path(const OcrRequest* msg) {
  return *msg->_impl_.pic_path_;
}
OcrRequest::OcrRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ocr_protobuf.OcrRequest)
}
OcrRequest::OcrRequest(const OcrRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  OcrRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pic_path_){nullptr}
    , decltype(_impl_.unknow_){}
    , decltype(_impl_.task_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_pic_path()) {
    _this->_impl_.pic_path_ = new ::ocr_protobuf::OcrRequest_PicPaths(*from._impl_.pic_path_);
  }
  ::memcpy(&_impl_.unknow_, &from._impl_.unknow_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.task_id_) -
    reinterpret_cast<char*>(&_impl_.unknow_)) + sizeof(_impl_.task_id_));
  // @@protoc_insertion_point(copy_constructor:ocr_protobuf.OcrRequest)
}

inline void OcrRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pic_path_){nullptr}
    , decltype(_impl_.unknow_){0}
    , decltype(_impl_.task_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OcrRequest::~OcrRequest() {
  // @@protoc_insertion_point(destructor:ocr_protobuf.OcrRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OcrRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pic_path_;
}

void OcrRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OcrRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ocr_protobuf.OcrRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.pic_path_ != nullptr) {
    delete _impl_.pic_path_;
  }
  _impl_.pic_path_ = nullptr;
  ::memset(&_impl_.unknow_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.task_id_) -
      reinterpret_cast<char*>(&_impl_.unknow_)) + sizeof(_impl_.task_id_));
  _internal_metadata_.Clear<std::string>();
}

const char* OcrRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 unknow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.unknow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 task_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.task_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ocr_protobuf.OcrRequest.PicPaths pic_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pic_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OcrRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ocr_protobuf.OcrRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 unknow = 1;
  if (this->_internal_unknow() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_unknow(), target);
  }

  // int32 task_id = 2;
  if (this->_internal_task_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_task_id(), target);
  }

  // .ocr_protobuf.OcrRequest.PicPaths pic_path = 3;
  if (this->_internal_has_pic_path()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pic_path(this),
        _Internal::pic_path(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ocr_protobuf.OcrRequest)
  return target;
}

size_t OcrRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ocr_protobuf.OcrRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ocr_protobuf.OcrRequest.PicPaths pic_path = 3;
  if (this->_internal_has_pic_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pic_path_);
  }

  // int32 unknow = 1;
  if (this->_internal_unknow() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_unknow());
  }

  // int32 task_id = 2;
  if (this->_internal_task_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_task_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OcrRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const OcrRequest*>(
      &from));
}

void OcrRequest::MergeFrom(const OcrRequest& from) {
  OcrRequest* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:ocr_protobuf.OcrRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pic_path()) {
    _this->_internal_mutable_pic_path()->::ocr_protobuf::OcrRequest_PicPaths::MergeFrom(
        from._internal_pic_path());
  }
  if (from._internal_unknow() != 0) {
    _this->_internal_set_unknow(from._internal_unknow());
  }
  if (from._internal_task_id() != 0) {
    _this->_internal_set_task_id(from._internal_task_id());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void OcrRequest::CopyFrom(const OcrRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ocr_protobuf.OcrRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OcrRequest::IsInitialized() const {
  return true;
}

void OcrRequest::InternalSwap(OcrRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OcrRequest, _impl_.task_id_)
      + sizeof(OcrRequest::_impl_.task_id_)
      - PROTOBUF_FIELD_OFFSET(OcrRequest, _impl_.pic_path_)>(
          reinterpret_cast<char*>(&_impl_.pic_path_),
          reinterpret_cast<char*>(&other->_impl_.pic_path_));
}

std::string OcrRequest::GetTypeName() const {
  return "ocr_protobuf.OcrRequest";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ocr_protobuf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ocr_protobuf::OcrResponse_OcrResult_ResultPos_PosXY*
Arena::CreateMaybeMessage< ::ocr_protobuf::OcrResponse_OcrResult_ResultPos_PosXY >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ocr_protobuf::OcrResponse_OcrResult_ResultPos_PosXY >(arena);
}
template<> PROTOBUF_NOINLINE ::ocr_protobuf::OcrResponse_OcrResult_ResultPos*
Arena::CreateMaybeMessage< ::ocr_protobuf::OcrResponse_OcrResult_ResultPos >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ocr_protobuf::OcrResponse_OcrResult_ResultPos >(arena);
}
template<> PROTOBUF_NOINLINE ::ocr_protobuf::OcrResponse_OcrResult_SingleResult_OneResult*
Arena::CreateMaybeMessage< ::ocr_protobuf::OcrResponse_OcrResult_SingleResult_OneResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ocr_protobuf::OcrResponse_OcrResult_SingleResult_OneResult >(arena);
}
template<> PROTOBUF_NOINLINE ::ocr_protobuf::OcrResponse_OcrResult_SingleResult*
Arena::CreateMaybeMessage< ::ocr_protobuf::OcrResponse_OcrResult_SingleResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ocr_protobuf::OcrResponse_OcrResult_SingleResult >(arena);
}
template<> PROTOBUF_NOINLINE ::ocr_protobuf::OcrResponse_OcrResult*
Arena::CreateMaybeMessage< ::ocr_protobuf::OcrResponse_OcrResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ocr_protobuf::OcrResponse_OcrResult >(arena);
}
template<> PROTOBUF_NOINLINE ::ocr_protobuf::OcrResponse*
Arena::CreateMaybeMessage< ::ocr_protobuf::OcrResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ocr_protobuf::OcrResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ocr_protobuf::OcrRequest_PicPaths*
Arena::CreateMaybeMessage< ::ocr_protobuf::OcrRequest_PicPaths >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ocr_protobuf::OcrRequest_PicPaths >(arena);
}
template<> PROTOBUF_NOINLINE ::ocr_protobuf::OcrRequest*
Arena::CreateMaybeMessage< ::ocr_protobuf::OcrRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ocr_protobuf::OcrRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
