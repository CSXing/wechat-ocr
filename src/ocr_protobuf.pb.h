// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ocr_protobuf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ocr_5fprotobuf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ocr_5fprotobuf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ocr_5fprotobuf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ocr_5fprotobuf_2eproto {
  static const uint32_t offsets[];
};
namespace ocr_protobuf {
class OcrRequest;
struct OcrRequestDefaultTypeInternal;
extern OcrRequestDefaultTypeInternal _OcrRequest_default_instance_;
class OcrRequest_PicPaths;
struct OcrRequest_PicPathsDefaultTypeInternal;
extern OcrRequest_PicPathsDefaultTypeInternal _OcrRequest_PicPaths_default_instance_;
class OcrResponse;
struct OcrResponseDefaultTypeInternal;
extern OcrResponseDefaultTypeInternal _OcrResponse_default_instance_;
class OcrResponse_OcrResult;
struct OcrResponse_OcrResultDefaultTypeInternal;
extern OcrResponse_OcrResultDefaultTypeInternal _OcrResponse_OcrResult_default_instance_;
class OcrResponse_OcrResult_ResultPos;
struct OcrResponse_OcrResult_ResultPosDefaultTypeInternal;
extern OcrResponse_OcrResult_ResultPosDefaultTypeInternal _OcrResponse_OcrResult_ResultPos_default_instance_;
class OcrResponse_OcrResult_ResultPos_PosXY;
struct OcrResponse_OcrResult_ResultPos_PosXYDefaultTypeInternal;
extern OcrResponse_OcrResult_ResultPos_PosXYDefaultTypeInternal _OcrResponse_OcrResult_ResultPos_PosXY_default_instance_;
class OcrResponse_OcrResult_SingleResult;
struct OcrResponse_OcrResult_SingleResultDefaultTypeInternal;
extern OcrResponse_OcrResult_SingleResultDefaultTypeInternal _OcrResponse_OcrResult_SingleResult_default_instance_;
class OcrResponse_OcrResult_SingleResult_OneResult;
struct OcrResponse_OcrResult_SingleResult_OneResultDefaultTypeInternal;
extern OcrResponse_OcrResult_SingleResult_OneResultDefaultTypeInternal _OcrResponse_OcrResult_SingleResult_OneResult_default_instance_;
}  // namespace ocr_protobuf
PROTOBUF_NAMESPACE_OPEN
template<> ::ocr_protobuf::OcrRequest* Arena::CreateMaybeMessage<::ocr_protobuf::OcrRequest>(Arena*);
template<> ::ocr_protobuf::OcrRequest_PicPaths* Arena::CreateMaybeMessage<::ocr_protobuf::OcrRequest_PicPaths>(Arena*);
template<> ::ocr_protobuf::OcrResponse* Arena::CreateMaybeMessage<::ocr_protobuf::OcrResponse>(Arena*);
template<> ::ocr_protobuf::OcrResponse_OcrResult* Arena::CreateMaybeMessage<::ocr_protobuf::OcrResponse_OcrResult>(Arena*);
template<> ::ocr_protobuf::OcrResponse_OcrResult_ResultPos* Arena::CreateMaybeMessage<::ocr_protobuf::OcrResponse_OcrResult_ResultPos>(Arena*);
template<> ::ocr_protobuf::OcrResponse_OcrResult_ResultPos_PosXY* Arena::CreateMaybeMessage<::ocr_protobuf::OcrResponse_OcrResult_ResultPos_PosXY>(Arena*);
template<> ::ocr_protobuf::OcrResponse_OcrResult_SingleResult* Arena::CreateMaybeMessage<::ocr_protobuf::OcrResponse_OcrResult_SingleResult>(Arena*);
template<> ::ocr_protobuf::OcrResponse_OcrResult_SingleResult_OneResult* Arena::CreateMaybeMessage<::ocr_protobuf::OcrResponse_OcrResult_SingleResult_OneResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ocr_protobuf {

// ===================================================================

class OcrResponse_OcrResult_ResultPos_PosXY final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY) */ {
 public:
  inline OcrResponse_OcrResult_ResultPos_PosXY() : OcrResponse_OcrResult_ResultPos_PosXY(nullptr) {}
  ~OcrResponse_OcrResult_ResultPos_PosXY() override;
  explicit PROTOBUF_CONSTEXPR OcrResponse_OcrResult_ResultPos_PosXY(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OcrResponse_OcrResult_ResultPos_PosXY(const OcrResponse_OcrResult_ResultPos_PosXY& from);
  OcrResponse_OcrResult_ResultPos_PosXY(OcrResponse_OcrResult_ResultPos_PosXY&& from) noexcept
    : OcrResponse_OcrResult_ResultPos_PosXY() {
    *this = ::std::move(from);
  }

  inline OcrResponse_OcrResult_ResultPos_PosXY& operator=(const OcrResponse_OcrResult_ResultPos_PosXY& from) {
    CopyFrom(from);
    return *this;
  }
  inline OcrResponse_OcrResult_ResultPos_PosXY& operator=(OcrResponse_OcrResult_ResultPos_PosXY&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const OcrResponse_OcrResult_ResultPos_PosXY& default_instance() {
    return *internal_default_instance();
  }
  static inline const OcrResponse_OcrResult_ResultPos_PosXY* internal_default_instance() {
    return reinterpret_cast<const OcrResponse_OcrResult_ResultPos_PosXY*>(
               &_OcrResponse_OcrResult_ResultPos_PosXY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OcrResponse_OcrResult_ResultPos_PosXY& a, OcrResponse_OcrResult_ResultPos_PosXY& b) {
    a.Swap(&b);
  }
  inline void Swap(OcrResponse_OcrResult_ResultPos_PosXY* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OcrResponse_OcrResult_ResultPos_PosXY* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OcrResponse_OcrResult_ResultPos_PosXY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OcrResponse_OcrResult_ResultPos_PosXY>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const OcrResponse_OcrResult_ResultPos_PosXY& from);
  void MergeFrom(const OcrResponse_OcrResult_ResultPos_PosXY& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OcrResponse_OcrResult_ResultPos_PosXY* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY";
  }
  protected:
  explicit OcrResponse_OcrResult_ResultPos_PosXY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ocr_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class OcrResponse_OcrResult_ResultPos final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ocr_protobuf.OcrResponse.OcrResult.ResultPos) */ {
 public:
  inline OcrResponse_OcrResult_ResultPos() : OcrResponse_OcrResult_ResultPos(nullptr) {}
  ~OcrResponse_OcrResult_ResultPos() override;
  explicit PROTOBUF_CONSTEXPR OcrResponse_OcrResult_ResultPos(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OcrResponse_OcrResult_ResultPos(const OcrResponse_OcrResult_ResultPos& from);
  OcrResponse_OcrResult_ResultPos(OcrResponse_OcrResult_ResultPos&& from) noexcept
    : OcrResponse_OcrResult_ResultPos() {
    *this = ::std::move(from);
  }

  inline OcrResponse_OcrResult_ResultPos& operator=(const OcrResponse_OcrResult_ResultPos& from) {
    CopyFrom(from);
    return *this;
  }
  inline OcrResponse_OcrResult_ResultPos& operator=(OcrResponse_OcrResult_ResultPos&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const OcrResponse_OcrResult_ResultPos& default_instance() {
    return *internal_default_instance();
  }
  static inline const OcrResponse_OcrResult_ResultPos* internal_default_instance() {
    return reinterpret_cast<const OcrResponse_OcrResult_ResultPos*>(
               &_OcrResponse_OcrResult_ResultPos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OcrResponse_OcrResult_ResultPos& a, OcrResponse_OcrResult_ResultPos& b) {
    a.Swap(&b);
  }
  inline void Swap(OcrResponse_OcrResult_ResultPos* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OcrResponse_OcrResult_ResultPos* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OcrResponse_OcrResult_ResultPos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OcrResponse_OcrResult_ResultPos>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const OcrResponse_OcrResult_ResultPos& from);
  void MergeFrom(const OcrResponse_OcrResult_ResultPos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OcrResponse_OcrResult_ResultPos* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ocr_protobuf.OcrResponse.OcrResult.ResultPos";
  }
  protected:
  explicit OcrResponse_OcrResult_ResultPos(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef OcrResponse_OcrResult_ResultPos_PosXY PosXY;

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 1,
  };
  // repeated .ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY pos = 1;
  int pos_size() const;
  private:
  int _internal_pos_size() const;
  public:
  void clear_pos();
  ::ocr_protobuf::OcrResponse_OcrResult_ResultPos_PosXY* mutable_pos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ocr_protobuf::OcrResponse_OcrResult_ResultPos_PosXY >*
      mutable_pos();
  private:
  const ::ocr_protobuf::OcrResponse_OcrResult_ResultPos_PosXY& _internal_pos(int index) const;
  ::ocr_protobuf::OcrResponse_OcrResult_ResultPos_PosXY* _internal_add_pos();
  public:
  const ::ocr_protobuf::OcrResponse_OcrResult_ResultPos_PosXY& pos(int index) const;
  ::ocr_protobuf::OcrResponse_OcrResult_ResultPos_PosXY* add_pos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ocr_protobuf::OcrResponse_OcrResult_ResultPos_PosXY >&
      pos() const;

  // @@protoc_insertion_point(class_scope:ocr_protobuf.OcrResponse.OcrResult.ResultPos)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ocr_protobuf::OcrResponse_OcrResult_ResultPos_PosXY > pos_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ocr_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class OcrResponse_OcrResult_SingleResult_OneResult final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult) */ {
 public:
  inline OcrResponse_OcrResult_SingleResult_OneResult() : OcrResponse_OcrResult_SingleResult_OneResult(nullptr) {}
  ~OcrResponse_OcrResult_SingleResult_OneResult() override;
  explicit PROTOBUF_CONSTEXPR OcrResponse_OcrResult_SingleResult_OneResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OcrResponse_OcrResult_SingleResult_OneResult(const OcrResponse_OcrResult_SingleResult_OneResult& from);
  OcrResponse_OcrResult_SingleResult_OneResult(OcrResponse_OcrResult_SingleResult_OneResult&& from) noexcept
    : OcrResponse_OcrResult_SingleResult_OneResult() {
    *this = ::std::move(from);
  }

  inline OcrResponse_OcrResult_SingleResult_OneResult& operator=(const OcrResponse_OcrResult_SingleResult_OneResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline OcrResponse_OcrResult_SingleResult_OneResult& operator=(OcrResponse_OcrResult_SingleResult_OneResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const OcrResponse_OcrResult_SingleResult_OneResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const OcrResponse_OcrResult_SingleResult_OneResult* internal_default_instance() {
    return reinterpret_cast<const OcrResponse_OcrResult_SingleResult_OneResult*>(
               &_OcrResponse_OcrResult_SingleResult_OneResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OcrResponse_OcrResult_SingleResult_OneResult& a, OcrResponse_OcrResult_SingleResult_OneResult& b) {
    a.Swap(&b);
  }
  inline void Swap(OcrResponse_OcrResult_SingleResult_OneResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OcrResponse_OcrResult_SingleResult_OneResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OcrResponse_OcrResult_SingleResult_OneResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OcrResponse_OcrResult_SingleResult_OneResult>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const OcrResponse_OcrResult_SingleResult_OneResult& from);
  void MergeFrom(const OcrResponse_OcrResult_SingleResult_OneResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OcrResponse_OcrResult_SingleResult_OneResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult";
  }
  protected:
  explicit OcrResponse_OcrResult_SingleResult_OneResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOneStrUtf8FieldNumber = 2,
    kOnePosFieldNumber = 1,
  };
  // bytes one_str_utf8 = 2;
  void clear_one_str_utf8();
  const std::string& one_str_utf8() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_one_str_utf8(ArgT0&& arg0, ArgT... args);
  std::string* mutable_one_str_utf8();
  PROTOBUF_NODISCARD std::string* release_one_str_utf8();
  void set_allocated_one_str_utf8(std::string* one_str_utf8);
  private:
  const std::string& _internal_one_str_utf8() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_one_str_utf8(const std::string& value);
  std::string* _internal_mutable_one_str_utf8();
  public:

  // .ocr_protobuf.OcrResponse.OcrResult.ResultPos one_pos = 1;
  bool has_one_pos() const;
  private:
  bool _internal_has_one_pos() const;
  public:
  void clear_one_pos();
  const ::ocr_protobuf::OcrResponse_OcrResult_ResultPos& one_pos() const;
  PROTOBUF_NODISCARD ::ocr_protobuf::OcrResponse_OcrResult_ResultPos* release_one_pos();
  ::ocr_protobuf::OcrResponse_OcrResult_ResultPos* mutable_one_pos();
  void set_allocated_one_pos(::ocr_protobuf::OcrResponse_OcrResult_ResultPos* one_pos);
  private:
  const ::ocr_protobuf::OcrResponse_OcrResult_ResultPos& _internal_one_pos() const;
  ::ocr_protobuf::OcrResponse_OcrResult_ResultPos* _internal_mutable_one_pos();
  public:
  void unsafe_arena_set_allocated_one_pos(
      ::ocr_protobuf::OcrResponse_OcrResult_ResultPos* one_pos);
  ::ocr_protobuf::OcrResponse_OcrResult_ResultPos* unsafe_arena_release_one_pos();

  // @@protoc_insertion_point(class_scope:ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr one_str_utf8_;
    ::ocr_protobuf::OcrResponse_OcrResult_ResultPos* one_pos_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ocr_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class OcrResponse_OcrResult_SingleResult final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ocr_protobuf.OcrResponse.OcrResult.SingleResult) */ {
 public:
  inline OcrResponse_OcrResult_SingleResult() : OcrResponse_OcrResult_SingleResult(nullptr) {}
  ~OcrResponse_OcrResult_SingleResult() override;
  explicit PROTOBUF_CONSTEXPR OcrResponse_OcrResult_SingleResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OcrResponse_OcrResult_SingleResult(const OcrResponse_OcrResult_SingleResult& from);
  OcrResponse_OcrResult_SingleResult(OcrResponse_OcrResult_SingleResult&& from) noexcept
    : OcrResponse_OcrResult_SingleResult() {
    *this = ::std::move(from);
  }

  inline OcrResponse_OcrResult_SingleResult& operator=(const OcrResponse_OcrResult_SingleResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline OcrResponse_OcrResult_SingleResult& operator=(OcrResponse_OcrResult_SingleResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const OcrResponse_OcrResult_SingleResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const OcrResponse_OcrResult_SingleResult* internal_default_instance() {
    return reinterpret_cast<const OcrResponse_OcrResult_SingleResult*>(
               &_OcrResponse_OcrResult_SingleResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OcrResponse_OcrResult_SingleResult& a, OcrResponse_OcrResult_SingleResult& b) {
    a.Swap(&b);
  }
  inline void Swap(OcrResponse_OcrResult_SingleResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OcrResponse_OcrResult_SingleResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OcrResponse_OcrResult_SingleResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OcrResponse_OcrResult_SingleResult>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const OcrResponse_OcrResult_SingleResult& from);
  void MergeFrom(const OcrResponse_OcrResult_SingleResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OcrResponse_OcrResult_SingleResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ocr_protobuf.OcrResponse.OcrResult.SingleResult";
  }
  protected:
  explicit OcrResponse_OcrResult_SingleResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef OcrResponse_OcrResult_SingleResult_OneResult OneResult;

  // accessors -------------------------------------------------------

  enum : int {
    kOneResultFieldNumber = 4,
    kSingleStrUtf8FieldNumber = 2,
    kSinglePosFieldNumber = 1,
    kUnknownPosFieldNumber = 10,
    kSingleRateFieldNumber = 3,
    kLeftFieldNumber = 5,
    kTopFieldNumber = 6,
    kRightFieldNumber = 7,
    kBottomFieldNumber = 8,
    kUnknown0FieldNumber = 9,
  };
  // repeated .ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult one_result = 4;
  int one_result_size() const;
  private:
  int _internal_one_result_size() const;
  public:
  void clear_one_result();
  ::ocr_protobuf::OcrResponse_OcrResult_SingleResult_OneResult* mutable_one_result(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ocr_protobuf::OcrResponse_OcrResult_SingleResult_OneResult >*
      mutable_one_result();
  private:
  const ::ocr_protobuf::OcrResponse_OcrResult_SingleResult_OneResult& _internal_one_result(int index) const;
  ::ocr_protobuf::OcrResponse_OcrResult_SingleResult_OneResult* _internal_add_one_result();
  public:
  const ::ocr_protobuf::OcrResponse_OcrResult_SingleResult_OneResult& one_result(int index) const;
  ::ocr_protobuf::OcrResponse_OcrResult_SingleResult_OneResult* add_one_result();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ocr_protobuf::OcrResponse_OcrResult_SingleResult_OneResult >&
      one_result() const;

  // bytes single_str_utf8 = 2;
  void clear_single_str_utf8();
  const std::string& single_str_utf8() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_single_str_utf8(ArgT0&& arg0, ArgT... args);
  std::string* mutable_single_str_utf8();
  PROTOBUF_NODISCARD std::string* release_single_str_utf8();
  void set_allocated_single_str_utf8(std::string* single_str_utf8);
  private:
  const std::string& _internal_single_str_utf8() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_single_str_utf8(const std::string& value);
  std::string* _internal_mutable_single_str_utf8();
  public:

  // .ocr_protobuf.OcrResponse.OcrResult.ResultPos single_pos = 1;
  bool has_single_pos() const;
  private:
  bool _internal_has_single_pos() const;
  public:
  void clear_single_pos();
  const ::ocr_protobuf::OcrResponse_OcrResult_ResultPos& single_pos() const;
  PROTOBUF_NODISCARD ::ocr_protobuf::OcrResponse_OcrResult_ResultPos* release_single_pos();
  ::ocr_protobuf::OcrResponse_OcrResult_ResultPos* mutable_single_pos();
  void set_allocated_single_pos(::ocr_protobuf::OcrResponse_OcrResult_ResultPos* single_pos);
  private:
  const ::ocr_protobuf::OcrResponse_OcrResult_ResultPos& _internal_single_pos() const;
  ::ocr_protobuf::OcrResponse_OcrResult_ResultPos* _internal_mutable_single_pos();
  public:
  void unsafe_arena_set_allocated_single_pos(
      ::ocr_protobuf::OcrResponse_OcrResult_ResultPos* single_pos);
  ::ocr_protobuf::OcrResponse_OcrResult_ResultPos* unsafe_arena_release_single_pos();

  // .ocr_protobuf.OcrResponse.OcrResult.ResultPos unknown_pos = 10;
  bool has_unknown_pos() const;
  private:
  bool _internal_has_unknown_pos() const;
  public:
  void clear_unknown_pos();
  const ::ocr_protobuf::OcrResponse_OcrResult_ResultPos& unknown_pos() const;
  PROTOBUF_NODISCARD ::ocr_protobuf::OcrResponse_OcrResult_ResultPos* release_unknown_pos();
  ::ocr_protobuf::OcrResponse_OcrResult_ResultPos* mutable_unknown_pos();
  void set_allocated_unknown_pos(::ocr_protobuf::OcrResponse_OcrResult_ResultPos* unknown_pos);
  private:
  const ::ocr_protobuf::OcrResponse_OcrResult_ResultPos& _internal_unknown_pos() const;
  ::ocr_protobuf::OcrResponse_OcrResult_ResultPos* _internal_mutable_unknown_pos();
  public:
  void unsafe_arena_set_allocated_unknown_pos(
      ::ocr_protobuf::OcrResponse_OcrResult_ResultPos* unknown_pos);
  ::ocr_protobuf::OcrResponse_OcrResult_ResultPos* unsafe_arena_release_unknown_pos();

  // float single_rate = 3;
  void clear_single_rate();
  float single_rate() const;
  void set_single_rate(float value);
  private:
  float _internal_single_rate() const;
  void _internal_set_single_rate(float value);
  public:

  // float left = 5;
  void clear_left();
  float left() const;
  void set_left(float value);
  private:
  float _internal_left() const;
  void _internal_set_left(float value);
  public:

  // float top = 6;
  void clear_top();
  float top() const;
  void set_top(float value);
  private:
  float _internal_top() const;
  void _internal_set_top(float value);
  public:

  // float right = 7;
  void clear_right();
  float right() const;
  void set_right(float value);
  private:
  float _internal_right() const;
  void _internal_set_right(float value);
  public:

  // float bottom = 8;
  void clear_bottom();
  float bottom() const;
  void set_bottom(float value);
  private:
  float _internal_bottom() const;
  void _internal_set_bottom(float value);
  public:

  // int32 unknown_0 = 9;
  void clear_unknown_0();
  int32_t unknown_0() const;
  void set_unknown_0(int32_t value);
  private:
  int32_t _internal_unknown_0() const;
  void _internal_set_unknown_0(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ocr_protobuf.OcrResponse.OcrResult.SingleResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ocr_protobuf::OcrResponse_OcrResult_SingleResult_OneResult > one_result_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr single_str_utf8_;
    ::ocr_protobuf::OcrResponse_OcrResult_ResultPos* single_pos_;
    ::ocr_protobuf::OcrResponse_OcrResult_ResultPos* unknown_pos_;
    float single_rate_;
    float left_;
    float top_;
    float right_;
    float bottom_;
    int32_t unknown_0_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ocr_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class OcrResponse_OcrResult final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ocr_protobuf.OcrResponse.OcrResult) */ {
 public:
  inline OcrResponse_OcrResult() : OcrResponse_OcrResult(nullptr) {}
  ~OcrResponse_OcrResult() override;
  explicit PROTOBUF_CONSTEXPR OcrResponse_OcrResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OcrResponse_OcrResult(const OcrResponse_OcrResult& from);
  OcrResponse_OcrResult(OcrResponse_OcrResult&& from) noexcept
    : OcrResponse_OcrResult() {
    *this = ::std::move(from);
  }

  inline OcrResponse_OcrResult& operator=(const OcrResponse_OcrResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline OcrResponse_OcrResult& operator=(OcrResponse_OcrResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const OcrResponse_OcrResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const OcrResponse_OcrResult* internal_default_instance() {
    return reinterpret_cast<const OcrResponse_OcrResult*>(
               &_OcrResponse_OcrResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(OcrResponse_OcrResult& a, OcrResponse_OcrResult& b) {
    a.Swap(&b);
  }
  inline void Swap(OcrResponse_OcrResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OcrResponse_OcrResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OcrResponse_OcrResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OcrResponse_OcrResult>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const OcrResponse_OcrResult& from);
  void MergeFrom(const OcrResponse_OcrResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OcrResponse_OcrResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ocr_protobuf.OcrResponse.OcrResult";
  }
  protected:
  explicit OcrResponse_OcrResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef OcrResponse_OcrResult_ResultPos ResultPos;
  typedef OcrResponse_OcrResult_SingleResult SingleResult;

  // accessors -------------------------------------------------------

  enum : int {
    kSingleResultFieldNumber = 1,
    kUnknown1FieldNumber = 2,
    kUnknown2FieldNumber = 3,
  };
  // repeated .ocr_protobuf.OcrResponse.OcrResult.SingleResult single_result = 1;
  int single_result_size() const;
  private:
  int _internal_single_result_size() const;
  public:
  void clear_single_result();
  ::ocr_protobuf::OcrResponse_OcrResult_SingleResult* mutable_single_result(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ocr_protobuf::OcrResponse_OcrResult_SingleResult >*
      mutable_single_result();
  private:
  const ::ocr_protobuf::OcrResponse_OcrResult_SingleResult& _internal_single_result(int index) const;
  ::ocr_protobuf::OcrResponse_OcrResult_SingleResult* _internal_add_single_result();
  public:
  const ::ocr_protobuf::OcrResponse_OcrResult_SingleResult& single_result(int index) const;
  ::ocr_protobuf::OcrResponse_OcrResult_SingleResult* add_single_result();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ocr_protobuf::OcrResponse_OcrResult_SingleResult >&
      single_result() const;

  // int32 unknown_1 = 2;
  void clear_unknown_1();
  int32_t unknown_1() const;
  void set_unknown_1(int32_t value);
  private:
  int32_t _internal_unknown_1() const;
  void _internal_set_unknown_1(int32_t value);
  public:

  // int32 unknown_2 = 3;
  void clear_unknown_2();
  int32_t unknown_2() const;
  void set_unknown_2(int32_t value);
  private:
  int32_t _internal_unknown_2() const;
  void _internal_set_unknown_2(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ocr_protobuf.OcrResponse.OcrResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ocr_protobuf::OcrResponse_OcrResult_SingleResult > single_result_;
    int32_t unknown_1_;
    int32_t unknown_2_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ocr_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class OcrResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ocr_protobuf.OcrResponse) */ {
 public:
  inline OcrResponse() : OcrResponse(nullptr) {}
  ~OcrResponse() override;
  explicit PROTOBUF_CONSTEXPR OcrResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OcrResponse(const OcrResponse& from);
  OcrResponse(OcrResponse&& from) noexcept
    : OcrResponse() {
    *this = ::std::move(from);
  }

  inline OcrResponse& operator=(const OcrResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OcrResponse& operator=(OcrResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const OcrResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OcrResponse* internal_default_instance() {
    return reinterpret_cast<const OcrResponse*>(
               &_OcrResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(OcrResponse& a, OcrResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OcrResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OcrResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OcrResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OcrResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const OcrResponse& from);
  void MergeFrom(const OcrResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OcrResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ocr_protobuf.OcrResponse";
  }
  protected:
  explicit OcrResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef OcrResponse_OcrResult OcrResult;

  // accessors -------------------------------------------------------

  enum : int {
    kOcrResultFieldNumber = 4,
    kTypeFieldNumber = 1,
    kTaskIdFieldNumber = 2,
    kErrCodeFieldNumber = 3,
  };
  // .ocr_protobuf.OcrResponse.OcrResult ocr_result = 4;
  bool has_ocr_result() const;
  private:
  bool _internal_has_ocr_result() const;
  public:
  void clear_ocr_result();
  const ::ocr_protobuf::OcrResponse_OcrResult& ocr_result() const;
  PROTOBUF_NODISCARD ::ocr_protobuf::OcrResponse_OcrResult* release_ocr_result();
  ::ocr_protobuf::OcrResponse_OcrResult* mutable_ocr_result();
  void set_allocated_ocr_result(::ocr_protobuf::OcrResponse_OcrResult* ocr_result);
  private:
  const ::ocr_protobuf::OcrResponse_OcrResult& _internal_ocr_result() const;
  ::ocr_protobuf::OcrResponse_OcrResult* _internal_mutable_ocr_result();
  public:
  void unsafe_arena_set_allocated_ocr_result(
      ::ocr_protobuf::OcrResponse_OcrResult* ocr_result);
  ::ocr_protobuf::OcrResponse_OcrResult* unsafe_arena_release_ocr_result();

  // int32 type = 1;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // int32 task_id = 2;
  void clear_task_id();
  int32_t task_id() const;
  void set_task_id(int32_t value);
  private:
  int32_t _internal_task_id() const;
  void _internal_set_task_id(int32_t value);
  public:

  // int32 err_code = 3;
  void clear_err_code();
  int32_t err_code() const;
  void set_err_code(int32_t value);
  private:
  int32_t _internal_err_code() const;
  void _internal_set_err_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ocr_protobuf.OcrResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::ocr_protobuf::OcrResponse_OcrResult* ocr_result_;
    int32_t type_;
    int32_t task_id_;
    int32_t err_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ocr_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class OcrRequest_PicPaths final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ocr_protobuf.OcrRequest.PicPaths) */ {
 public:
  inline OcrRequest_PicPaths() : OcrRequest_PicPaths(nullptr) {}
  ~OcrRequest_PicPaths() override;
  explicit PROTOBUF_CONSTEXPR OcrRequest_PicPaths(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OcrRequest_PicPaths(const OcrRequest_PicPaths& from);
  OcrRequest_PicPaths(OcrRequest_PicPaths&& from) noexcept
    : OcrRequest_PicPaths() {
    *this = ::std::move(from);
  }

  inline OcrRequest_PicPaths& operator=(const OcrRequest_PicPaths& from) {
    CopyFrom(from);
    return *this;
  }
  inline OcrRequest_PicPaths& operator=(OcrRequest_PicPaths&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const OcrRequest_PicPaths& default_instance() {
    return *internal_default_instance();
  }
  static inline const OcrRequest_PicPaths* internal_default_instance() {
    return reinterpret_cast<const OcrRequest_PicPaths*>(
               &_OcrRequest_PicPaths_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(OcrRequest_PicPaths& a, OcrRequest_PicPaths& b) {
    a.Swap(&b);
  }
  inline void Swap(OcrRequest_PicPaths* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OcrRequest_PicPaths* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OcrRequest_PicPaths* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OcrRequest_PicPaths>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const OcrRequest_PicPaths& from);
  void MergeFrom(const OcrRequest_PicPaths& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OcrRequest_PicPaths* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ocr_protobuf.OcrRequest.PicPaths";
  }
  protected:
  explicit OcrRequest_PicPaths(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPicPathFieldNumber = 1,
  };
  // repeated string pic_path = 1;
  int pic_path_size() const;
  private:
  int _internal_pic_path_size() const;
  public:
  void clear_pic_path();
  const std::string& pic_path(int index) const;
  std::string* mutable_pic_path(int index);
  void set_pic_path(int index, const std::string& value);
  void set_pic_path(int index, std::string&& value);
  void set_pic_path(int index, const char* value);
  void set_pic_path(int index, const char* value, size_t size);
  std::string* add_pic_path();
  void add_pic_path(const std::string& value);
  void add_pic_path(std::string&& value);
  void add_pic_path(const char* value);
  void add_pic_path(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& pic_path() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_pic_path();
  private:
  const std::string& _internal_pic_path(int index) const;
  std::string* _internal_add_pic_path();
  public:

  // @@protoc_insertion_point(class_scope:ocr_protobuf.OcrRequest.PicPaths)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> pic_path_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ocr_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class OcrRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ocr_protobuf.OcrRequest) */ {
 public:
  inline OcrRequest() : OcrRequest(nullptr) {}
  ~OcrRequest() override;
  explicit PROTOBUF_CONSTEXPR OcrRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OcrRequest(const OcrRequest& from);
  OcrRequest(OcrRequest&& from) noexcept
    : OcrRequest() {
    *this = ::std::move(from);
  }

  inline OcrRequest& operator=(const OcrRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OcrRequest& operator=(OcrRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const OcrRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OcrRequest* internal_default_instance() {
    return reinterpret_cast<const OcrRequest*>(
               &_OcrRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(OcrRequest& a, OcrRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OcrRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OcrRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OcrRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OcrRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const OcrRequest& from);
  void MergeFrom(const OcrRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OcrRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ocr_protobuf.OcrRequest";
  }
  protected:
  explicit OcrRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef OcrRequest_PicPaths PicPaths;

  // accessors -------------------------------------------------------

  enum : int {
    kPicPathFieldNumber = 3,
    kUnknowFieldNumber = 1,
    kTaskIdFieldNumber = 2,
  };
  // .ocr_protobuf.OcrRequest.PicPaths pic_path = 3;
  bool has_pic_path() const;
  private:
  bool _internal_has_pic_path() const;
  public:
  void clear_pic_path();
  const ::ocr_protobuf::OcrRequest_PicPaths& pic_path() const;
  PROTOBUF_NODISCARD ::ocr_protobuf::OcrRequest_PicPaths* release_pic_path();
  ::ocr_protobuf::OcrRequest_PicPaths* mutable_pic_path();
  void set_allocated_pic_path(::ocr_protobuf::OcrRequest_PicPaths* pic_path);
  private:
  const ::ocr_protobuf::OcrRequest_PicPaths& _internal_pic_path() const;
  ::ocr_protobuf::OcrRequest_PicPaths* _internal_mutable_pic_path();
  public:
  void unsafe_arena_set_allocated_pic_path(
      ::ocr_protobuf::OcrRequest_PicPaths* pic_path);
  ::ocr_protobuf::OcrRequest_PicPaths* unsafe_arena_release_pic_path();

  // int32 unknow = 1;
  void clear_unknow();
  int32_t unknow() const;
  void set_unknow(int32_t value);
  private:
  int32_t _internal_unknow() const;
  void _internal_set_unknow(int32_t value);
  public:

  // int32 task_id = 2;
  void clear_task_id();
  int32_t task_id() const;
  void set_task_id(int32_t value);
  private:
  int32_t _internal_task_id() const;
  void _internal_set_task_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ocr_protobuf.OcrRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::ocr_protobuf::OcrRequest_PicPaths* pic_path_;
    int32_t unknow_;
    int32_t task_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ocr_5fprotobuf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OcrResponse_OcrResult_ResultPos_PosXY

// float x = 1;
inline void OcrResponse_OcrResult_ResultPos_PosXY::clear_x() {
  _impl_.x_ = 0;
}
inline float OcrResponse_OcrResult_ResultPos_PosXY::_internal_x() const {
  return _impl_.x_;
}
inline float OcrResponse_OcrResult_ResultPos_PosXY::x() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY.x)
  return _internal_x();
}
inline void OcrResponse_OcrResult_ResultPos_PosXY::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void OcrResponse_OcrResult_ResultPos_PosXY::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY.x)
}

// float y = 2;
inline void OcrResponse_OcrResult_ResultPos_PosXY::clear_y() {
  _impl_.y_ = 0;
}
inline float OcrResponse_OcrResult_ResultPos_PosXY::_internal_y() const {
  return _impl_.y_;
}
inline float OcrResponse_OcrResult_ResultPos_PosXY::y() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY.y)
  return _internal_y();
}
inline void OcrResponse_OcrResult_ResultPos_PosXY::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void OcrResponse_OcrResult_ResultPos_PosXY::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY.y)
}

// -------------------------------------------------------------------

// OcrResponse_OcrResult_ResultPos

// repeated .ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY pos = 1;
inline int OcrResponse_OcrResult_ResultPos::_internal_pos_size() const {
  return _impl_.pos_.size();
}
inline int OcrResponse_OcrResult_ResultPos::pos_size() const {
  return _internal_pos_size();
}
inline void OcrResponse_OcrResult_ResultPos::clear_pos() {
  _impl_.pos_.Clear();
}
inline ::ocr_protobuf::OcrResponse_OcrResult_ResultPos_PosXY* OcrResponse_OcrResult_ResultPos::mutable_pos(int index) {
  // @@protoc_insertion_point(field_mutable:ocr_protobuf.OcrResponse.OcrResult.ResultPos.pos)
  return _impl_.pos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ocr_protobuf::OcrResponse_OcrResult_ResultPos_PosXY >*
OcrResponse_OcrResult_ResultPos::mutable_pos() {
  // @@protoc_insertion_point(field_mutable_list:ocr_protobuf.OcrResponse.OcrResult.ResultPos.pos)
  return &_impl_.pos_;
}
inline const ::ocr_protobuf::OcrResponse_OcrResult_ResultPos_PosXY& OcrResponse_OcrResult_ResultPos::_internal_pos(int index) const {
  return _impl_.pos_.Get(index);
}
inline const ::ocr_protobuf::OcrResponse_OcrResult_ResultPos_PosXY& OcrResponse_OcrResult_ResultPos::pos(int index) const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrResponse.OcrResult.ResultPos.pos)
  return _internal_pos(index);
}
inline ::ocr_protobuf::OcrResponse_OcrResult_ResultPos_PosXY* OcrResponse_OcrResult_ResultPos::_internal_add_pos() {
  return _impl_.pos_.Add();
}
inline ::ocr_protobuf::OcrResponse_OcrResult_ResultPos_PosXY* OcrResponse_OcrResult_ResultPos::add_pos() {
  ::ocr_protobuf::OcrResponse_OcrResult_ResultPos_PosXY* _add = _internal_add_pos();
  // @@protoc_insertion_point(field_add:ocr_protobuf.OcrResponse.OcrResult.ResultPos.pos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ocr_protobuf::OcrResponse_OcrResult_ResultPos_PosXY >&
OcrResponse_OcrResult_ResultPos::pos() const {
  // @@protoc_insertion_point(field_list:ocr_protobuf.OcrResponse.OcrResult.ResultPos.pos)
  return _impl_.pos_;
}

// -------------------------------------------------------------------

// OcrResponse_OcrResult_SingleResult_OneResult

// .ocr_protobuf.OcrResponse.OcrResult.ResultPos one_pos = 1;
inline bool OcrResponse_OcrResult_SingleResult_OneResult::_internal_has_one_pos() const {
  return this != internal_default_instance() && _impl_.one_pos_ != nullptr;
}
inline bool OcrResponse_OcrResult_SingleResult_OneResult::has_one_pos() const {
  return _internal_has_one_pos();
}
inline void OcrResponse_OcrResult_SingleResult_OneResult::clear_one_pos() {
  if (GetArenaForAllocation() == nullptr && _impl_.one_pos_ != nullptr) {
    delete _impl_.one_pos_;
  }
  _impl_.one_pos_ = nullptr;
}
inline const ::ocr_protobuf::OcrResponse_OcrResult_ResultPos& OcrResponse_OcrResult_SingleResult_OneResult::_internal_one_pos() const {
  const ::ocr_protobuf::OcrResponse_OcrResult_ResultPos* p = _impl_.one_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::ocr_protobuf::OcrResponse_OcrResult_ResultPos&>(
      ::ocr_protobuf::_OcrResponse_OcrResult_ResultPos_default_instance_);
}
inline const ::ocr_protobuf::OcrResponse_OcrResult_ResultPos& OcrResponse_OcrResult_SingleResult_OneResult::one_pos() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult.one_pos)
  return _internal_one_pos();
}
inline void OcrResponse_OcrResult_SingleResult_OneResult::unsafe_arena_set_allocated_one_pos(
    ::ocr_protobuf::OcrResponse_OcrResult_ResultPos* one_pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.one_pos_);
  }
  _impl_.one_pos_ = one_pos;
  if (one_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult.one_pos)
}
inline ::ocr_protobuf::OcrResponse_OcrResult_ResultPos* OcrResponse_OcrResult_SingleResult_OneResult::release_one_pos() {
  
  ::ocr_protobuf::OcrResponse_OcrResult_ResultPos* temp = _impl_.one_pos_;
  _impl_.one_pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ocr_protobuf::OcrResponse_OcrResult_ResultPos* OcrResponse_OcrResult_SingleResult_OneResult::unsafe_arena_release_one_pos() {
  // @@protoc_insertion_point(field_release:ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult.one_pos)
  
  ::ocr_protobuf::OcrResponse_OcrResult_ResultPos* temp = _impl_.one_pos_;
  _impl_.one_pos_ = nullptr;
  return temp;
}
inline ::ocr_protobuf::OcrResponse_OcrResult_ResultPos* OcrResponse_OcrResult_SingleResult_OneResult::_internal_mutable_one_pos() {
  
  if (_impl_.one_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::ocr_protobuf::OcrResponse_OcrResult_ResultPos>(GetArenaForAllocation());
    _impl_.one_pos_ = p;
  }
  return _impl_.one_pos_;
}
inline ::ocr_protobuf::OcrResponse_OcrResult_ResultPos* OcrResponse_OcrResult_SingleResult_OneResult::mutable_one_pos() {
  ::ocr_protobuf::OcrResponse_OcrResult_ResultPos* _msg = _internal_mutable_one_pos();
  // @@protoc_insertion_point(field_mutable:ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult.one_pos)
  return _msg;
}
inline void OcrResponse_OcrResult_SingleResult_OneResult::set_allocated_one_pos(::ocr_protobuf::OcrResponse_OcrResult_ResultPos* one_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.one_pos_;
  }
  if (one_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(one_pos);
    if (message_arena != submessage_arena) {
      one_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, one_pos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.one_pos_ = one_pos;
  // @@protoc_insertion_point(field_set_allocated:ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult.one_pos)
}

// bytes one_str_utf8 = 2;
inline void OcrResponse_OcrResult_SingleResult_OneResult::clear_one_str_utf8() {
  _impl_.one_str_utf8_.ClearToEmpty();
}
inline const std::string& OcrResponse_OcrResult_SingleResult_OneResult::one_str_utf8() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult.one_str_utf8)
  return _internal_one_str_utf8();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OcrResponse_OcrResult_SingleResult_OneResult::set_one_str_utf8(ArgT0&& arg0, ArgT... args) {
 
 _impl_.one_str_utf8_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult.one_str_utf8)
}
inline std::string* OcrResponse_OcrResult_SingleResult_OneResult::mutable_one_str_utf8() {
  std::string* _s = _internal_mutable_one_str_utf8();
  // @@protoc_insertion_point(field_mutable:ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult.one_str_utf8)
  return _s;
}
inline const std::string& OcrResponse_OcrResult_SingleResult_OneResult::_internal_one_str_utf8() const {
  return _impl_.one_str_utf8_.Get();
}
inline void OcrResponse_OcrResult_SingleResult_OneResult::_internal_set_one_str_utf8(const std::string& value) {
  
  _impl_.one_str_utf8_.Set(value, GetArenaForAllocation());
}
inline std::string* OcrResponse_OcrResult_SingleResult_OneResult::_internal_mutable_one_str_utf8() {
  
  return _impl_.one_str_utf8_.Mutable(GetArenaForAllocation());
}
inline std::string* OcrResponse_OcrResult_SingleResult_OneResult::release_one_str_utf8() {
  // @@protoc_insertion_point(field_release:ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult.one_str_utf8)
  return _impl_.one_str_utf8_.Release();
}
inline void OcrResponse_OcrResult_SingleResult_OneResult::set_allocated_one_str_utf8(std::string* one_str_utf8) {
  if (one_str_utf8 != nullptr) {
    
  } else {
    
  }
  _impl_.one_str_utf8_.SetAllocated(one_str_utf8, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.one_str_utf8_.IsDefault()) {
    _impl_.one_str_utf8_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult.one_str_utf8)
}

// -------------------------------------------------------------------

// OcrResponse_OcrResult_SingleResult

// .ocr_protobuf.OcrResponse.OcrResult.ResultPos single_pos = 1;
inline bool OcrResponse_OcrResult_SingleResult::_internal_has_single_pos() const {
  return this != internal_default_instance() && _impl_.single_pos_ != nullptr;
}
inline bool OcrResponse_OcrResult_SingleResult::has_single_pos() const {
  return _internal_has_single_pos();
}
inline void OcrResponse_OcrResult_SingleResult::clear_single_pos() {
  if (GetArenaForAllocation() == nullptr && _impl_.single_pos_ != nullptr) {
    delete _impl_.single_pos_;
  }
  _impl_.single_pos_ = nullptr;
}
inline const ::ocr_protobuf::OcrResponse_OcrResult_ResultPos& OcrResponse_OcrResult_SingleResult::_internal_single_pos() const {
  const ::ocr_protobuf::OcrResponse_OcrResult_ResultPos* p = _impl_.single_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::ocr_protobuf::OcrResponse_OcrResult_ResultPos&>(
      ::ocr_protobuf::_OcrResponse_OcrResult_ResultPos_default_instance_);
}
inline const ::ocr_protobuf::OcrResponse_OcrResult_ResultPos& OcrResponse_OcrResult_SingleResult::single_pos() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrResponse.OcrResult.SingleResult.single_pos)
  return _internal_single_pos();
}
inline void OcrResponse_OcrResult_SingleResult::unsafe_arena_set_allocated_single_pos(
    ::ocr_protobuf::OcrResponse_OcrResult_ResultPos* single_pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.single_pos_);
  }
  _impl_.single_pos_ = single_pos;
  if (single_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ocr_protobuf.OcrResponse.OcrResult.SingleResult.single_pos)
}
inline ::ocr_protobuf::OcrResponse_OcrResult_ResultPos* OcrResponse_OcrResult_SingleResult::release_single_pos() {
  
  ::ocr_protobuf::OcrResponse_OcrResult_ResultPos* temp = _impl_.single_pos_;
  _impl_.single_pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ocr_protobuf::OcrResponse_OcrResult_ResultPos* OcrResponse_OcrResult_SingleResult::unsafe_arena_release_single_pos() {
  // @@protoc_insertion_point(field_release:ocr_protobuf.OcrResponse.OcrResult.SingleResult.single_pos)
  
  ::ocr_protobuf::OcrResponse_OcrResult_ResultPos* temp = _impl_.single_pos_;
  _impl_.single_pos_ = nullptr;
  return temp;
}
inline ::ocr_protobuf::OcrResponse_OcrResult_ResultPos* OcrResponse_OcrResult_SingleResult::_internal_mutable_single_pos() {
  
  if (_impl_.single_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::ocr_protobuf::OcrResponse_OcrResult_ResultPos>(GetArenaForAllocation());
    _impl_.single_pos_ = p;
  }
  return _impl_.single_pos_;
}
inline ::ocr_protobuf::OcrResponse_OcrResult_ResultPos* OcrResponse_OcrResult_SingleResult::mutable_single_pos() {
  ::ocr_protobuf::OcrResponse_OcrResult_ResultPos* _msg = _internal_mutable_single_pos();
  // @@protoc_insertion_point(field_mutable:ocr_protobuf.OcrResponse.OcrResult.SingleResult.single_pos)
  return _msg;
}
inline void OcrResponse_OcrResult_SingleResult::set_allocated_single_pos(::ocr_protobuf::OcrResponse_OcrResult_ResultPos* single_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.single_pos_;
  }
  if (single_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(single_pos);
    if (message_arena != submessage_arena) {
      single_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, single_pos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.single_pos_ = single_pos;
  // @@protoc_insertion_point(field_set_allocated:ocr_protobuf.OcrResponse.OcrResult.SingleResult.single_pos)
}

// bytes single_str_utf8 = 2;
inline void OcrResponse_OcrResult_SingleResult::clear_single_str_utf8() {
  _impl_.single_str_utf8_.ClearToEmpty();
}
inline const std::string& OcrResponse_OcrResult_SingleResult::single_str_utf8() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrResponse.OcrResult.SingleResult.single_str_utf8)
  return _internal_single_str_utf8();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OcrResponse_OcrResult_SingleResult::set_single_str_utf8(ArgT0&& arg0, ArgT... args) {
 
 _impl_.single_str_utf8_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ocr_protobuf.OcrResponse.OcrResult.SingleResult.single_str_utf8)
}
inline std::string* OcrResponse_OcrResult_SingleResult::mutable_single_str_utf8() {
  std::string* _s = _internal_mutable_single_str_utf8();
  // @@protoc_insertion_point(field_mutable:ocr_protobuf.OcrResponse.OcrResult.SingleResult.single_str_utf8)
  return _s;
}
inline const std::string& OcrResponse_OcrResult_SingleResult::_internal_single_str_utf8() const {
  return _impl_.single_str_utf8_.Get();
}
inline void OcrResponse_OcrResult_SingleResult::_internal_set_single_str_utf8(const std::string& value) {
  
  _impl_.single_str_utf8_.Set(value, GetArenaForAllocation());
}
inline std::string* OcrResponse_OcrResult_SingleResult::_internal_mutable_single_str_utf8() {
  
  return _impl_.single_str_utf8_.Mutable(GetArenaForAllocation());
}
inline std::string* OcrResponse_OcrResult_SingleResult::release_single_str_utf8() {
  // @@protoc_insertion_point(field_release:ocr_protobuf.OcrResponse.OcrResult.SingleResult.single_str_utf8)
  return _impl_.single_str_utf8_.Release();
}
inline void OcrResponse_OcrResult_SingleResult::set_allocated_single_str_utf8(std::string* single_str_utf8) {
  if (single_str_utf8 != nullptr) {
    
  } else {
    
  }
  _impl_.single_str_utf8_.SetAllocated(single_str_utf8, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.single_str_utf8_.IsDefault()) {
    _impl_.single_str_utf8_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ocr_protobuf.OcrResponse.OcrResult.SingleResult.single_str_utf8)
}

// float single_rate = 3;
inline void OcrResponse_OcrResult_SingleResult::clear_single_rate() {
  _impl_.single_rate_ = 0;
}
inline float OcrResponse_OcrResult_SingleResult::_internal_single_rate() const {
  return _impl_.single_rate_;
}
inline float OcrResponse_OcrResult_SingleResult::single_rate() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrResponse.OcrResult.SingleResult.single_rate)
  return _internal_single_rate();
}
inline void OcrResponse_OcrResult_SingleResult::_internal_set_single_rate(float value) {
  
  _impl_.single_rate_ = value;
}
inline void OcrResponse_OcrResult_SingleResult::set_single_rate(float value) {
  _internal_set_single_rate(value);
  // @@protoc_insertion_point(field_set:ocr_protobuf.OcrResponse.OcrResult.SingleResult.single_rate)
}

// repeated .ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult one_result = 4;
inline int OcrResponse_OcrResult_SingleResult::_internal_one_result_size() const {
  return _impl_.one_result_.size();
}
inline int OcrResponse_OcrResult_SingleResult::one_result_size() const {
  return _internal_one_result_size();
}
inline void OcrResponse_OcrResult_SingleResult::clear_one_result() {
  _impl_.one_result_.Clear();
}
inline ::ocr_protobuf::OcrResponse_OcrResult_SingleResult_OneResult* OcrResponse_OcrResult_SingleResult::mutable_one_result(int index) {
  // @@protoc_insertion_point(field_mutable:ocr_protobuf.OcrResponse.OcrResult.SingleResult.one_result)
  return _impl_.one_result_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ocr_protobuf::OcrResponse_OcrResult_SingleResult_OneResult >*
OcrResponse_OcrResult_SingleResult::mutable_one_result() {
  // @@protoc_insertion_point(field_mutable_list:ocr_protobuf.OcrResponse.OcrResult.SingleResult.one_result)
  return &_impl_.one_result_;
}
inline const ::ocr_protobuf::OcrResponse_OcrResult_SingleResult_OneResult& OcrResponse_OcrResult_SingleResult::_internal_one_result(int index) const {
  return _impl_.one_result_.Get(index);
}
inline const ::ocr_protobuf::OcrResponse_OcrResult_SingleResult_OneResult& OcrResponse_OcrResult_SingleResult::one_result(int index) const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrResponse.OcrResult.SingleResult.one_result)
  return _internal_one_result(index);
}
inline ::ocr_protobuf::OcrResponse_OcrResult_SingleResult_OneResult* OcrResponse_OcrResult_SingleResult::_internal_add_one_result() {
  return _impl_.one_result_.Add();
}
inline ::ocr_protobuf::OcrResponse_OcrResult_SingleResult_OneResult* OcrResponse_OcrResult_SingleResult::add_one_result() {
  ::ocr_protobuf::OcrResponse_OcrResult_SingleResult_OneResult* _add = _internal_add_one_result();
  // @@protoc_insertion_point(field_add:ocr_protobuf.OcrResponse.OcrResult.SingleResult.one_result)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ocr_protobuf::OcrResponse_OcrResult_SingleResult_OneResult >&
OcrResponse_OcrResult_SingleResult::one_result() const {
  // @@protoc_insertion_point(field_list:ocr_protobuf.OcrResponse.OcrResult.SingleResult.one_result)
  return _impl_.one_result_;
}

// float left = 5;
inline void OcrResponse_OcrResult_SingleResult::clear_left() {
  _impl_.left_ = 0;
}
inline float OcrResponse_OcrResult_SingleResult::_internal_left() const {
  return _impl_.left_;
}
inline float OcrResponse_OcrResult_SingleResult::left() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrResponse.OcrResult.SingleResult.left)
  return _internal_left();
}
inline void OcrResponse_OcrResult_SingleResult::_internal_set_left(float value) {
  
  _impl_.left_ = value;
}
inline void OcrResponse_OcrResult_SingleResult::set_left(float value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:ocr_protobuf.OcrResponse.OcrResult.SingleResult.left)
}

// float top = 6;
inline void OcrResponse_OcrResult_SingleResult::clear_top() {
  _impl_.top_ = 0;
}
inline float OcrResponse_OcrResult_SingleResult::_internal_top() const {
  return _impl_.top_;
}
inline float OcrResponse_OcrResult_SingleResult::top() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrResponse.OcrResult.SingleResult.top)
  return _internal_top();
}
inline void OcrResponse_OcrResult_SingleResult::_internal_set_top(float value) {
  
  _impl_.top_ = value;
}
inline void OcrResponse_OcrResult_SingleResult::set_top(float value) {
  _internal_set_top(value);
  // @@protoc_insertion_point(field_set:ocr_protobuf.OcrResponse.OcrResult.SingleResult.top)
}

// float right = 7;
inline void OcrResponse_OcrResult_SingleResult::clear_right() {
  _impl_.right_ = 0;
}
inline float OcrResponse_OcrResult_SingleResult::_internal_right() const {
  return _impl_.right_;
}
inline float OcrResponse_OcrResult_SingleResult::right() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrResponse.OcrResult.SingleResult.right)
  return _internal_right();
}
inline void OcrResponse_OcrResult_SingleResult::_internal_set_right(float value) {
  
  _impl_.right_ = value;
}
inline void OcrResponse_OcrResult_SingleResult::set_right(float value) {
  _internal_set_right(value);
  // @@protoc_insertion_point(field_set:ocr_protobuf.OcrResponse.OcrResult.SingleResult.right)
}

// float bottom = 8;
inline void OcrResponse_OcrResult_SingleResult::clear_bottom() {
  _impl_.bottom_ = 0;
}
inline float OcrResponse_OcrResult_SingleResult::_internal_bottom() const {
  return _impl_.bottom_;
}
inline float OcrResponse_OcrResult_SingleResult::bottom() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrResponse.OcrResult.SingleResult.bottom)
  return _internal_bottom();
}
inline void OcrResponse_OcrResult_SingleResult::_internal_set_bottom(float value) {
  
  _impl_.bottom_ = value;
}
inline void OcrResponse_OcrResult_SingleResult::set_bottom(float value) {
  _internal_set_bottom(value);
  // @@protoc_insertion_point(field_set:ocr_protobuf.OcrResponse.OcrResult.SingleResult.bottom)
}

// int32 unknown_0 = 9;
inline void OcrResponse_OcrResult_SingleResult::clear_unknown_0() {
  _impl_.unknown_0_ = 0;
}
inline int32_t OcrResponse_OcrResult_SingleResult::_internal_unknown_0() const {
  return _impl_.unknown_0_;
}
inline int32_t OcrResponse_OcrResult_SingleResult::unknown_0() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrResponse.OcrResult.SingleResult.unknown_0)
  return _internal_unknown_0();
}
inline void OcrResponse_OcrResult_SingleResult::_internal_set_unknown_0(int32_t value) {
  
  _impl_.unknown_0_ = value;
}
inline void OcrResponse_OcrResult_SingleResult::set_unknown_0(int32_t value) {
  _internal_set_unknown_0(value);
  // @@protoc_insertion_point(field_set:ocr_protobuf.OcrResponse.OcrResult.SingleResult.unknown_0)
}

// .ocr_protobuf.OcrResponse.OcrResult.ResultPos unknown_pos = 10;
inline bool OcrResponse_OcrResult_SingleResult::_internal_has_unknown_pos() const {
  return this != internal_default_instance() && _impl_.unknown_pos_ != nullptr;
}
inline bool OcrResponse_OcrResult_SingleResult::has_unknown_pos() const {
  return _internal_has_unknown_pos();
}
inline void OcrResponse_OcrResult_SingleResult::clear_unknown_pos() {
  if (GetArenaForAllocation() == nullptr && _impl_.unknown_pos_ != nullptr) {
    delete _impl_.unknown_pos_;
  }
  _impl_.unknown_pos_ = nullptr;
}
inline const ::ocr_protobuf::OcrResponse_OcrResult_ResultPos& OcrResponse_OcrResult_SingleResult::_internal_unknown_pos() const {
  const ::ocr_protobuf::OcrResponse_OcrResult_ResultPos* p = _impl_.unknown_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::ocr_protobuf::OcrResponse_OcrResult_ResultPos&>(
      ::ocr_protobuf::_OcrResponse_OcrResult_ResultPos_default_instance_);
}
inline const ::ocr_protobuf::OcrResponse_OcrResult_ResultPos& OcrResponse_OcrResult_SingleResult::unknown_pos() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrResponse.OcrResult.SingleResult.unknown_pos)
  return _internal_unknown_pos();
}
inline void OcrResponse_OcrResult_SingleResult::unsafe_arena_set_allocated_unknown_pos(
    ::ocr_protobuf::OcrResponse_OcrResult_ResultPos* unknown_pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unknown_pos_);
  }
  _impl_.unknown_pos_ = unknown_pos;
  if (unknown_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ocr_protobuf.OcrResponse.OcrResult.SingleResult.unknown_pos)
}
inline ::ocr_protobuf::OcrResponse_OcrResult_ResultPos* OcrResponse_OcrResult_SingleResult::release_unknown_pos() {
  
  ::ocr_protobuf::OcrResponse_OcrResult_ResultPos* temp = _impl_.unknown_pos_;
  _impl_.unknown_pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ocr_protobuf::OcrResponse_OcrResult_ResultPos* OcrResponse_OcrResult_SingleResult::unsafe_arena_release_unknown_pos() {
  // @@protoc_insertion_point(field_release:ocr_protobuf.OcrResponse.OcrResult.SingleResult.unknown_pos)
  
  ::ocr_protobuf::OcrResponse_OcrResult_ResultPos* temp = _impl_.unknown_pos_;
  _impl_.unknown_pos_ = nullptr;
  return temp;
}
inline ::ocr_protobuf::OcrResponse_OcrResult_ResultPos* OcrResponse_OcrResult_SingleResult::_internal_mutable_unknown_pos() {
  
  if (_impl_.unknown_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::ocr_protobuf::OcrResponse_OcrResult_ResultPos>(GetArenaForAllocation());
    _impl_.unknown_pos_ = p;
  }
  return _impl_.unknown_pos_;
}
inline ::ocr_protobuf::OcrResponse_OcrResult_ResultPos* OcrResponse_OcrResult_SingleResult::mutable_unknown_pos() {
  ::ocr_protobuf::OcrResponse_OcrResult_ResultPos* _msg = _internal_mutable_unknown_pos();
  // @@protoc_insertion_point(field_mutable:ocr_protobuf.OcrResponse.OcrResult.SingleResult.unknown_pos)
  return _msg;
}
inline void OcrResponse_OcrResult_SingleResult::set_allocated_unknown_pos(::ocr_protobuf::OcrResponse_OcrResult_ResultPos* unknown_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.unknown_pos_;
  }
  if (unknown_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(unknown_pos);
    if (message_arena != submessage_arena) {
      unknown_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unknown_pos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.unknown_pos_ = unknown_pos;
  // @@protoc_insertion_point(field_set_allocated:ocr_protobuf.OcrResponse.OcrResult.SingleResult.unknown_pos)
}

// -------------------------------------------------------------------

// OcrResponse_OcrResult

// repeated .ocr_protobuf.OcrResponse.OcrResult.SingleResult single_result = 1;
inline int OcrResponse_OcrResult::_internal_single_result_size() const {
  return _impl_.single_result_.size();
}
inline int OcrResponse_OcrResult::single_result_size() const {
  return _internal_single_result_size();
}
inline void OcrResponse_OcrResult::clear_single_result() {
  _impl_.single_result_.Clear();
}
inline ::ocr_protobuf::OcrResponse_OcrResult_SingleResult* OcrResponse_OcrResult::mutable_single_result(int index) {
  // @@protoc_insertion_point(field_mutable:ocr_protobuf.OcrResponse.OcrResult.single_result)
  return _impl_.single_result_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ocr_protobuf::OcrResponse_OcrResult_SingleResult >*
OcrResponse_OcrResult::mutable_single_result() {
  // @@protoc_insertion_point(field_mutable_list:ocr_protobuf.OcrResponse.OcrResult.single_result)
  return &_impl_.single_result_;
}
inline const ::ocr_protobuf::OcrResponse_OcrResult_SingleResult& OcrResponse_OcrResult::_internal_single_result(int index) const {
  return _impl_.single_result_.Get(index);
}
inline const ::ocr_protobuf::OcrResponse_OcrResult_SingleResult& OcrResponse_OcrResult::single_result(int index) const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrResponse.OcrResult.single_result)
  return _internal_single_result(index);
}
inline ::ocr_protobuf::OcrResponse_OcrResult_SingleResult* OcrResponse_OcrResult::_internal_add_single_result() {
  return _impl_.single_result_.Add();
}
inline ::ocr_protobuf::OcrResponse_OcrResult_SingleResult* OcrResponse_OcrResult::add_single_result() {
  ::ocr_protobuf::OcrResponse_OcrResult_SingleResult* _add = _internal_add_single_result();
  // @@protoc_insertion_point(field_add:ocr_protobuf.OcrResponse.OcrResult.single_result)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ocr_protobuf::OcrResponse_OcrResult_SingleResult >&
OcrResponse_OcrResult::single_result() const {
  // @@protoc_insertion_point(field_list:ocr_protobuf.OcrResponse.OcrResult.single_result)
  return _impl_.single_result_;
}

// int32 unknown_1 = 2;
inline void OcrResponse_OcrResult::clear_unknown_1() {
  _impl_.unknown_1_ = 0;
}
inline int32_t OcrResponse_OcrResult::_internal_unknown_1() const {
  return _impl_.unknown_1_;
}
inline int32_t OcrResponse_OcrResult::unknown_1() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrResponse.OcrResult.unknown_1)
  return _internal_unknown_1();
}
inline void OcrResponse_OcrResult::_internal_set_unknown_1(int32_t value) {
  
  _impl_.unknown_1_ = value;
}
inline void OcrResponse_OcrResult::set_unknown_1(int32_t value) {
  _internal_set_unknown_1(value);
  // @@protoc_insertion_point(field_set:ocr_protobuf.OcrResponse.OcrResult.unknown_1)
}

// int32 unknown_2 = 3;
inline void OcrResponse_OcrResult::clear_unknown_2() {
  _impl_.unknown_2_ = 0;
}
inline int32_t OcrResponse_OcrResult::_internal_unknown_2() const {
  return _impl_.unknown_2_;
}
inline int32_t OcrResponse_OcrResult::unknown_2() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrResponse.OcrResult.unknown_2)
  return _internal_unknown_2();
}
inline void OcrResponse_OcrResult::_internal_set_unknown_2(int32_t value) {
  
  _impl_.unknown_2_ = value;
}
inline void OcrResponse_OcrResult::set_unknown_2(int32_t value) {
  _internal_set_unknown_2(value);
  // @@protoc_insertion_point(field_set:ocr_protobuf.OcrResponse.OcrResult.unknown_2)
}

// -------------------------------------------------------------------

// OcrResponse

// int32 type = 1;
inline void OcrResponse::clear_type() {
  _impl_.type_ = 0;
}
inline int32_t OcrResponse::_internal_type() const {
  return _impl_.type_;
}
inline int32_t OcrResponse::type() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrResponse.type)
  return _internal_type();
}
inline void OcrResponse::_internal_set_type(int32_t value) {
  
  _impl_.type_ = value;
}
inline void OcrResponse::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ocr_protobuf.OcrResponse.type)
}

// int32 task_id = 2;
inline void OcrResponse::clear_task_id() {
  _impl_.task_id_ = 0;
}
inline int32_t OcrResponse::_internal_task_id() const {
  return _impl_.task_id_;
}
inline int32_t OcrResponse::task_id() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrResponse.task_id)
  return _internal_task_id();
}
inline void OcrResponse::_internal_set_task_id(int32_t value) {
  
  _impl_.task_id_ = value;
}
inline void OcrResponse::set_task_id(int32_t value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:ocr_protobuf.OcrResponse.task_id)
}

// int32 err_code = 3;
inline void OcrResponse::clear_err_code() {
  _impl_.err_code_ = 0;
}
inline int32_t OcrResponse::_internal_err_code() const {
  return _impl_.err_code_;
}
inline int32_t OcrResponse::err_code() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrResponse.err_code)
  return _internal_err_code();
}
inline void OcrResponse::_internal_set_err_code(int32_t value) {
  
  _impl_.err_code_ = value;
}
inline void OcrResponse::set_err_code(int32_t value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:ocr_protobuf.OcrResponse.err_code)
}

// .ocr_protobuf.OcrResponse.OcrResult ocr_result = 4;
inline bool OcrResponse::_internal_has_ocr_result() const {
  return this != internal_default_instance() && _impl_.ocr_result_ != nullptr;
}
inline bool OcrResponse::has_ocr_result() const {
  return _internal_has_ocr_result();
}
inline void OcrResponse::clear_ocr_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.ocr_result_ != nullptr) {
    delete _impl_.ocr_result_;
  }
  _impl_.ocr_result_ = nullptr;
}
inline const ::ocr_protobuf::OcrResponse_OcrResult& OcrResponse::_internal_ocr_result() const {
  const ::ocr_protobuf::OcrResponse_OcrResult* p = _impl_.ocr_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::ocr_protobuf::OcrResponse_OcrResult&>(
      ::ocr_protobuf::_OcrResponse_OcrResult_default_instance_);
}
inline const ::ocr_protobuf::OcrResponse_OcrResult& OcrResponse::ocr_result() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrResponse.ocr_result)
  return _internal_ocr_result();
}
inline void OcrResponse::unsafe_arena_set_allocated_ocr_result(
    ::ocr_protobuf::OcrResponse_OcrResult* ocr_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ocr_result_);
  }
  _impl_.ocr_result_ = ocr_result;
  if (ocr_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ocr_protobuf.OcrResponse.ocr_result)
}
inline ::ocr_protobuf::OcrResponse_OcrResult* OcrResponse::release_ocr_result() {
  
  ::ocr_protobuf::OcrResponse_OcrResult* temp = _impl_.ocr_result_;
  _impl_.ocr_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ocr_protobuf::OcrResponse_OcrResult* OcrResponse::unsafe_arena_release_ocr_result() {
  // @@protoc_insertion_point(field_release:ocr_protobuf.OcrResponse.ocr_result)
  
  ::ocr_protobuf::OcrResponse_OcrResult* temp = _impl_.ocr_result_;
  _impl_.ocr_result_ = nullptr;
  return temp;
}
inline ::ocr_protobuf::OcrResponse_OcrResult* OcrResponse::_internal_mutable_ocr_result() {
  
  if (_impl_.ocr_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::ocr_protobuf::OcrResponse_OcrResult>(GetArenaForAllocation());
    _impl_.ocr_result_ = p;
  }
  return _impl_.ocr_result_;
}
inline ::ocr_protobuf::OcrResponse_OcrResult* OcrResponse::mutable_ocr_result() {
  ::ocr_protobuf::OcrResponse_OcrResult* _msg = _internal_mutable_ocr_result();
  // @@protoc_insertion_point(field_mutable:ocr_protobuf.OcrResponse.ocr_result)
  return _msg;
}
inline void OcrResponse::set_allocated_ocr_result(::ocr_protobuf::OcrResponse_OcrResult* ocr_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ocr_result_;
  }
  if (ocr_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ocr_result);
    if (message_arena != submessage_arena) {
      ocr_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ocr_result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ocr_result_ = ocr_result;
  // @@protoc_insertion_point(field_set_allocated:ocr_protobuf.OcrResponse.ocr_result)
}

// -------------------------------------------------------------------

// OcrRequest_PicPaths

// repeated string pic_path = 1;
inline int OcrRequest_PicPaths::_internal_pic_path_size() const {
  return _impl_.pic_path_.size();
}
inline int OcrRequest_PicPaths::pic_path_size() const {
  return _internal_pic_path_size();
}
inline void OcrRequest_PicPaths::clear_pic_path() {
  _impl_.pic_path_.Clear();
}
inline std::string* OcrRequest_PicPaths::add_pic_path() {
  std::string* _s = _internal_add_pic_path();
  // @@protoc_insertion_point(field_add_mutable:ocr_protobuf.OcrRequest.PicPaths.pic_path)
  return _s;
}
inline const std::string& OcrRequest_PicPaths::_internal_pic_path(int index) const {
  return _impl_.pic_path_.Get(index);
}
inline const std::string& OcrRequest_PicPaths::pic_path(int index) const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrRequest.PicPaths.pic_path)
  return _internal_pic_path(index);
}
inline std::string* OcrRequest_PicPaths::mutable_pic_path(int index) {
  // @@protoc_insertion_point(field_mutable:ocr_protobuf.OcrRequest.PicPaths.pic_path)
  return _impl_.pic_path_.Mutable(index);
}
inline void OcrRequest_PicPaths::set_pic_path(int index, const std::string& value) {
  _impl_.pic_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ocr_protobuf.OcrRequest.PicPaths.pic_path)
}
inline void OcrRequest_PicPaths::set_pic_path(int index, std::string&& value) {
  _impl_.pic_path_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ocr_protobuf.OcrRequest.PicPaths.pic_path)
}
inline void OcrRequest_PicPaths::set_pic_path(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.pic_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ocr_protobuf.OcrRequest.PicPaths.pic_path)
}
inline void OcrRequest_PicPaths::set_pic_path(int index, const char* value, size_t size) {
  _impl_.pic_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ocr_protobuf.OcrRequest.PicPaths.pic_path)
}
inline std::string* OcrRequest_PicPaths::_internal_add_pic_path() {
  return _impl_.pic_path_.Add();
}
inline void OcrRequest_PicPaths::add_pic_path(const std::string& value) {
  _impl_.pic_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ocr_protobuf.OcrRequest.PicPaths.pic_path)
}
inline void OcrRequest_PicPaths::add_pic_path(std::string&& value) {
  _impl_.pic_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ocr_protobuf.OcrRequest.PicPaths.pic_path)
}
inline void OcrRequest_PicPaths::add_pic_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.pic_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ocr_protobuf.OcrRequest.PicPaths.pic_path)
}
inline void OcrRequest_PicPaths::add_pic_path(const char* value, size_t size) {
  _impl_.pic_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ocr_protobuf.OcrRequest.PicPaths.pic_path)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OcrRequest_PicPaths::pic_path() const {
  // @@protoc_insertion_point(field_list:ocr_protobuf.OcrRequest.PicPaths.pic_path)
  return _impl_.pic_path_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OcrRequest_PicPaths::mutable_pic_path() {
  // @@protoc_insertion_point(field_mutable_list:ocr_protobuf.OcrRequest.PicPaths.pic_path)
  return &_impl_.pic_path_;
}

// -------------------------------------------------------------------

// OcrRequest

// int32 unknow = 1;
inline void OcrRequest::clear_unknow() {
  _impl_.unknow_ = 0;
}
inline int32_t OcrRequest::_internal_unknow() const {
  return _impl_.unknow_;
}
inline int32_t OcrRequest::unknow() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrRequest.unknow)
  return _internal_unknow();
}
inline void OcrRequest::_internal_set_unknow(int32_t value) {
  
  _impl_.unknow_ = value;
}
inline void OcrRequest::set_unknow(int32_t value) {
  _internal_set_unknow(value);
  // @@protoc_insertion_point(field_set:ocr_protobuf.OcrRequest.unknow)
}

// int32 task_id = 2;
inline void OcrRequest::clear_task_id() {
  _impl_.task_id_ = 0;
}
inline int32_t OcrRequest::_internal_task_id() const {
  return _impl_.task_id_;
}
inline int32_t OcrRequest::task_id() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrRequest.task_id)
  return _internal_task_id();
}
inline void OcrRequest::_internal_set_task_id(int32_t value) {
  
  _impl_.task_id_ = value;
}
inline void OcrRequest::set_task_id(int32_t value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:ocr_protobuf.OcrRequest.task_id)
}

// .ocr_protobuf.OcrRequest.PicPaths pic_path = 3;
inline bool OcrRequest::_internal_has_pic_path() const {
  return this != internal_default_instance() && _impl_.pic_path_ != nullptr;
}
inline bool OcrRequest::has_pic_path() const {
  return _internal_has_pic_path();
}
inline void OcrRequest::clear_pic_path() {
  if (GetArenaForAllocation() == nullptr && _impl_.pic_path_ != nullptr) {
    delete _impl_.pic_path_;
  }
  _impl_.pic_path_ = nullptr;
}
inline const ::ocr_protobuf::OcrRequest_PicPaths& OcrRequest::_internal_pic_path() const {
  const ::ocr_protobuf::OcrRequest_PicPaths* p = _impl_.pic_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::ocr_protobuf::OcrRequest_PicPaths&>(
      ::ocr_protobuf::_OcrRequest_PicPaths_default_instance_);
}
inline const ::ocr_protobuf::OcrRequest_PicPaths& OcrRequest::pic_path() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrRequest.pic_path)
  return _internal_pic_path();
}
inline void OcrRequest::unsafe_arena_set_allocated_pic_path(
    ::ocr_protobuf::OcrRequest_PicPaths* pic_path) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pic_path_);
  }
  _impl_.pic_path_ = pic_path;
  if (pic_path) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ocr_protobuf.OcrRequest.pic_path)
}
inline ::ocr_protobuf::OcrRequest_PicPaths* OcrRequest::release_pic_path() {
  
  ::ocr_protobuf::OcrRequest_PicPaths* temp = _impl_.pic_path_;
  _impl_.pic_path_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ocr_protobuf::OcrRequest_PicPaths* OcrRequest::unsafe_arena_release_pic_path() {
  // @@protoc_insertion_point(field_release:ocr_protobuf.OcrRequest.pic_path)
  
  ::ocr_protobuf::OcrRequest_PicPaths* temp = _impl_.pic_path_;
  _impl_.pic_path_ = nullptr;
  return temp;
}
inline ::ocr_protobuf::OcrRequest_PicPaths* OcrRequest::_internal_mutable_pic_path() {
  
  if (_impl_.pic_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::ocr_protobuf::OcrRequest_PicPaths>(GetArenaForAllocation());
    _impl_.pic_path_ = p;
  }
  return _impl_.pic_path_;
}
inline ::ocr_protobuf::OcrRequest_PicPaths* OcrRequest::mutable_pic_path() {
  ::ocr_protobuf::OcrRequest_PicPaths* _msg = _internal_mutable_pic_path();
  // @@protoc_insertion_point(field_mutable:ocr_protobuf.OcrRequest.pic_path)
  return _msg;
}
inline void OcrRequest::set_allocated_pic_path(::ocr_protobuf::OcrRequest_PicPaths* pic_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pic_path_;
  }
  if (pic_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pic_path);
    if (message_arena != submessage_arena) {
      pic_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pic_path, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pic_path_ = pic_path;
  // @@protoc_insertion_point(field_set_allocated:ocr_protobuf.OcrRequest.pic_path)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ocr_protobuf

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ocr_5fprotobuf_2eproto
