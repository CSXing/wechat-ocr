// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ocr_protobuf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ocr_5fprotobuf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ocr_5fprotobuf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ocr_5fprotobuf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ocr_5fprotobuf_2eproto {
  static const uint32_t offsets[];
};
namespace ocr_protobuf {
class OcrRequest;
struct OcrRequestDefaultTypeInternal;
extern OcrRequestDefaultTypeInternal _OcrRequest_default_instance_;
class OcrRequest_OcrInputBuffer;
struct OcrRequest_OcrInputBufferDefaultTypeInternal;
extern OcrRequest_OcrInputBufferDefaultTypeInternal _OcrRequest_OcrInputBuffer_default_instance_;
class OcrRespond;
struct OcrRespondDefaultTypeInternal;
extern OcrRespondDefaultTypeInternal _OcrRespond_default_instance_;
class OcrRespond_OCRResultChar;
struct OcrRespond_OCRResultCharDefaultTypeInternal;
extern OcrRespond_OCRResultCharDefaultTypeInternal _OcrRespond_OCRResultChar_default_instance_;
class OcrRespond_OCRResultLine;
struct OcrRespond_OCRResultLineDefaultTypeInternal;
extern OcrRespond_OCRResultLineDefaultTypeInternal _OcrRespond_OCRResultLine_default_instance_;
class OcrRespond_OcrBox;
struct OcrRespond_OcrBoxDefaultTypeInternal;
extern OcrRespond_OcrBoxDefaultTypeInternal _OcrRespond_OcrBox_default_instance_;
class OcrRespond_OcrBoxPoint;
struct OcrRespond_OcrBoxPointDefaultTypeInternal;
extern OcrRespond_OcrBoxPointDefaultTypeInternal _OcrRespond_OcrBoxPoint_default_instance_;
class OcrRespond_OcrOutputBuffer;
struct OcrRespond_OcrOutputBufferDefaultTypeInternal;
extern OcrRespond_OcrOutputBufferDefaultTypeInternal _OcrRespond_OcrOutputBuffer_default_instance_;
}  // namespace ocr_protobuf
PROTOBUF_NAMESPACE_OPEN
template<> ::ocr_protobuf::OcrRequest* Arena::CreateMaybeMessage<::ocr_protobuf::OcrRequest>(Arena*);
template<> ::ocr_protobuf::OcrRequest_OcrInputBuffer* Arena::CreateMaybeMessage<::ocr_protobuf::OcrRequest_OcrInputBuffer>(Arena*);
template<> ::ocr_protobuf::OcrRespond* Arena::CreateMaybeMessage<::ocr_protobuf::OcrRespond>(Arena*);
template<> ::ocr_protobuf::OcrRespond_OCRResultChar* Arena::CreateMaybeMessage<::ocr_protobuf::OcrRespond_OCRResultChar>(Arena*);
template<> ::ocr_protobuf::OcrRespond_OCRResultLine* Arena::CreateMaybeMessage<::ocr_protobuf::OcrRespond_OCRResultLine>(Arena*);
template<> ::ocr_protobuf::OcrRespond_OcrBox* Arena::CreateMaybeMessage<::ocr_protobuf::OcrRespond_OcrBox>(Arena*);
template<> ::ocr_protobuf::OcrRespond_OcrBoxPoint* Arena::CreateMaybeMessage<::ocr_protobuf::OcrRespond_OcrBoxPoint>(Arena*);
template<> ::ocr_protobuf::OcrRespond_OcrOutputBuffer* Arena::CreateMaybeMessage<::ocr_protobuf::OcrRespond_OcrOutputBuffer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ocr_protobuf {

// ===================================================================

class OcrRespond_OcrBoxPoint final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ocr_protobuf.OcrRespond.OcrBoxPoint) */ {
 public:
  inline OcrRespond_OcrBoxPoint() : OcrRespond_OcrBoxPoint(nullptr) {}
  ~OcrRespond_OcrBoxPoint() override;
  explicit PROTOBUF_CONSTEXPR OcrRespond_OcrBoxPoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OcrRespond_OcrBoxPoint(const OcrRespond_OcrBoxPoint& from);
  OcrRespond_OcrBoxPoint(OcrRespond_OcrBoxPoint&& from) noexcept
    : OcrRespond_OcrBoxPoint() {
    *this = ::std::move(from);
  }

  inline OcrRespond_OcrBoxPoint& operator=(const OcrRespond_OcrBoxPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline OcrRespond_OcrBoxPoint& operator=(OcrRespond_OcrBoxPoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const OcrRespond_OcrBoxPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const OcrRespond_OcrBoxPoint* internal_default_instance() {
    return reinterpret_cast<const OcrRespond_OcrBoxPoint*>(
               &_OcrRespond_OcrBoxPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OcrRespond_OcrBoxPoint& a, OcrRespond_OcrBoxPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(OcrRespond_OcrBoxPoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OcrRespond_OcrBoxPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OcrRespond_OcrBoxPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OcrRespond_OcrBoxPoint>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const OcrRespond_OcrBoxPoint& from);
  void MergeFrom(const OcrRespond_OcrBoxPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OcrRespond_OcrBoxPoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ocr_protobuf.OcrRespond.OcrBoxPoint";
  }
  protected:
  explicit OcrRespond_OcrBoxPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // optional float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:ocr_protobuf.OcrRespond.OcrBoxPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float x_;
    float y_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ocr_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class OcrRespond_OcrBox final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ocr_protobuf.OcrRespond.OcrBox) */ {
 public:
  inline OcrRespond_OcrBox() : OcrRespond_OcrBox(nullptr) {}
  ~OcrRespond_OcrBox() override;
  explicit PROTOBUF_CONSTEXPR OcrRespond_OcrBox(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OcrRespond_OcrBox(const OcrRespond_OcrBox& from);
  OcrRespond_OcrBox(OcrRespond_OcrBox&& from) noexcept
    : OcrRespond_OcrBox() {
    *this = ::std::move(from);
  }

  inline OcrRespond_OcrBox& operator=(const OcrRespond_OcrBox& from) {
    CopyFrom(from);
    return *this;
  }
  inline OcrRespond_OcrBox& operator=(OcrRespond_OcrBox&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const OcrRespond_OcrBox& default_instance() {
    return *internal_default_instance();
  }
  static inline const OcrRespond_OcrBox* internal_default_instance() {
    return reinterpret_cast<const OcrRespond_OcrBox*>(
               &_OcrRespond_OcrBox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OcrRespond_OcrBox& a, OcrRespond_OcrBox& b) {
    a.Swap(&b);
  }
  inline void Swap(OcrRespond_OcrBox* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OcrRespond_OcrBox* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OcrRespond_OcrBox* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OcrRespond_OcrBox>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const OcrRespond_OcrBox& from);
  void MergeFrom(const OcrRespond_OcrBox& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OcrRespond_OcrBox* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ocr_protobuf.OcrRespond.OcrBox";
  }
  protected:
  explicit OcrRespond_OcrBox(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopleftFieldNumber = 1,
    kToprightFieldNumber = 2,
    kBottomrightFieldNumber = 3,
    kBottomleftFieldNumber = 4,
  };
  // optional .ocr_protobuf.OcrRespond.OcrBoxPoint topleft = 1;
  bool has_topleft() const;
  private:
  bool _internal_has_topleft() const;
  public:
  void clear_topleft();
  const ::ocr_protobuf::OcrRespond_OcrBoxPoint& topleft() const;
  PROTOBUF_NODISCARD ::ocr_protobuf::OcrRespond_OcrBoxPoint* release_topleft();
  ::ocr_protobuf::OcrRespond_OcrBoxPoint* mutable_topleft();
  void set_allocated_topleft(::ocr_protobuf::OcrRespond_OcrBoxPoint* topleft);
  private:
  const ::ocr_protobuf::OcrRespond_OcrBoxPoint& _internal_topleft() const;
  ::ocr_protobuf::OcrRespond_OcrBoxPoint* _internal_mutable_topleft();
  public:
  void unsafe_arena_set_allocated_topleft(
      ::ocr_protobuf::OcrRespond_OcrBoxPoint* topleft);
  ::ocr_protobuf::OcrRespond_OcrBoxPoint* unsafe_arena_release_topleft();

  // optional .ocr_protobuf.OcrRespond.OcrBoxPoint topright = 2;
  bool has_topright() const;
  private:
  bool _internal_has_topright() const;
  public:
  void clear_topright();
  const ::ocr_protobuf::OcrRespond_OcrBoxPoint& topright() const;
  PROTOBUF_NODISCARD ::ocr_protobuf::OcrRespond_OcrBoxPoint* release_topright();
  ::ocr_protobuf::OcrRespond_OcrBoxPoint* mutable_topright();
  void set_allocated_topright(::ocr_protobuf::OcrRespond_OcrBoxPoint* topright);
  private:
  const ::ocr_protobuf::OcrRespond_OcrBoxPoint& _internal_topright() const;
  ::ocr_protobuf::OcrRespond_OcrBoxPoint* _internal_mutable_topright();
  public:
  void unsafe_arena_set_allocated_topright(
      ::ocr_protobuf::OcrRespond_OcrBoxPoint* topright);
  ::ocr_protobuf::OcrRespond_OcrBoxPoint* unsafe_arena_release_topright();

  // optional .ocr_protobuf.OcrRespond.OcrBoxPoint bottomright = 3;
  bool has_bottomright() const;
  private:
  bool _internal_has_bottomright() const;
  public:
  void clear_bottomright();
  const ::ocr_protobuf::OcrRespond_OcrBoxPoint& bottomright() const;
  PROTOBUF_NODISCARD ::ocr_protobuf::OcrRespond_OcrBoxPoint* release_bottomright();
  ::ocr_protobuf::OcrRespond_OcrBoxPoint* mutable_bottomright();
  void set_allocated_bottomright(::ocr_protobuf::OcrRespond_OcrBoxPoint* bottomright);
  private:
  const ::ocr_protobuf::OcrRespond_OcrBoxPoint& _internal_bottomright() const;
  ::ocr_protobuf::OcrRespond_OcrBoxPoint* _internal_mutable_bottomright();
  public:
  void unsafe_arena_set_allocated_bottomright(
      ::ocr_protobuf::OcrRespond_OcrBoxPoint* bottomright);
  ::ocr_protobuf::OcrRespond_OcrBoxPoint* unsafe_arena_release_bottomright();

  // optional .ocr_protobuf.OcrRespond.OcrBoxPoint bottomleft = 4;
  bool has_bottomleft() const;
  private:
  bool _internal_has_bottomleft() const;
  public:
  void clear_bottomleft();
  const ::ocr_protobuf::OcrRespond_OcrBoxPoint& bottomleft() const;
  PROTOBUF_NODISCARD ::ocr_protobuf::OcrRespond_OcrBoxPoint* release_bottomleft();
  ::ocr_protobuf::OcrRespond_OcrBoxPoint* mutable_bottomleft();
  void set_allocated_bottomleft(::ocr_protobuf::OcrRespond_OcrBoxPoint* bottomleft);
  private:
  const ::ocr_protobuf::OcrRespond_OcrBoxPoint& _internal_bottomleft() const;
  ::ocr_protobuf::OcrRespond_OcrBoxPoint* _internal_mutable_bottomleft();
  public:
  void unsafe_arena_set_allocated_bottomleft(
      ::ocr_protobuf::OcrRespond_OcrBoxPoint* bottomleft);
  ::ocr_protobuf::OcrRespond_OcrBoxPoint* unsafe_arena_release_bottomleft();

  // @@protoc_insertion_point(class_scope:ocr_protobuf.OcrRespond.OcrBox)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::ocr_protobuf::OcrRespond_OcrBoxPoint* topleft_;
    ::ocr_protobuf::OcrRespond_OcrBoxPoint* topright_;
    ::ocr_protobuf::OcrRespond_OcrBoxPoint* bottomright_;
    ::ocr_protobuf::OcrRespond_OcrBoxPoint* bottomleft_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ocr_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class OcrRespond_OCRResultChar final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ocr_protobuf.OcrRespond.OCRResultChar) */ {
 public:
  inline OcrRespond_OCRResultChar() : OcrRespond_OCRResultChar(nullptr) {}
  ~OcrRespond_OCRResultChar() override;
  explicit PROTOBUF_CONSTEXPR OcrRespond_OCRResultChar(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OcrRespond_OCRResultChar(const OcrRespond_OCRResultChar& from);
  OcrRespond_OCRResultChar(OcrRespond_OCRResultChar&& from) noexcept
    : OcrRespond_OCRResultChar() {
    *this = ::std::move(from);
  }

  inline OcrRespond_OCRResultChar& operator=(const OcrRespond_OCRResultChar& from) {
    CopyFrom(from);
    return *this;
  }
  inline OcrRespond_OCRResultChar& operator=(OcrRespond_OCRResultChar&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const OcrRespond_OCRResultChar& default_instance() {
    return *internal_default_instance();
  }
  static inline const OcrRespond_OCRResultChar* internal_default_instance() {
    return reinterpret_cast<const OcrRespond_OCRResultChar*>(
               &_OcrRespond_OCRResultChar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OcrRespond_OCRResultChar& a, OcrRespond_OCRResultChar& b) {
    a.Swap(&b);
  }
  inline void Swap(OcrRespond_OCRResultChar* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OcrRespond_OCRResultChar* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OcrRespond_OCRResultChar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OcrRespond_OCRResultChar>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const OcrRespond_OCRResultChar& from);
  void MergeFrom(const OcrRespond_OCRResultChar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OcrRespond_OCRResultChar* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ocr_protobuf.OcrRespond.OCRResultChar";
  }
  protected:
  explicit OcrRespond_OCRResultChar(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharsFieldNumber = 2,
    kCharBoxFieldNumber = 1,
  };
  // optional string chars = 2;
  bool has_chars() const;
  private:
  bool _internal_has_chars() const;
  public:
  void clear_chars();
  const std::string& chars() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chars(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chars();
  PROTOBUF_NODISCARD std::string* release_chars();
  void set_allocated_chars(std::string* chars);
  private:
  const std::string& _internal_chars() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chars(const std::string& value);
  std::string* _internal_mutable_chars();
  public:

  // optional .ocr_protobuf.OcrRespond.OcrBox char_box = 1;
  bool has_char_box() const;
  private:
  bool _internal_has_char_box() const;
  public:
  void clear_char_box();
  const ::ocr_protobuf::OcrRespond_OcrBox& char_box() const;
  PROTOBUF_NODISCARD ::ocr_protobuf::OcrRespond_OcrBox* release_char_box();
  ::ocr_protobuf::OcrRespond_OcrBox* mutable_char_box();
  void set_allocated_char_box(::ocr_protobuf::OcrRespond_OcrBox* char_box);
  private:
  const ::ocr_protobuf::OcrRespond_OcrBox& _internal_char_box() const;
  ::ocr_protobuf::OcrRespond_OcrBox* _internal_mutable_char_box();
  public:
  void unsafe_arena_set_allocated_char_box(
      ::ocr_protobuf::OcrRespond_OcrBox* char_box);
  ::ocr_protobuf::OcrRespond_OcrBox* unsafe_arena_release_char_box();

  // @@protoc_insertion_point(class_scope:ocr_protobuf.OcrRespond.OCRResultChar)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chars_;
    ::ocr_protobuf::OcrRespond_OcrBox* char_box_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ocr_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class OcrRespond_OCRResultLine final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ocr_protobuf.OcrRespond.OCRResultLine) */ {
 public:
  inline OcrRespond_OCRResultLine() : OcrRespond_OCRResultLine(nullptr) {}
  ~OcrRespond_OCRResultLine() override;
  explicit PROTOBUF_CONSTEXPR OcrRespond_OCRResultLine(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OcrRespond_OCRResultLine(const OcrRespond_OCRResultLine& from);
  OcrRespond_OCRResultLine(OcrRespond_OCRResultLine&& from) noexcept
    : OcrRespond_OCRResultLine() {
    *this = ::std::move(from);
  }

  inline OcrRespond_OCRResultLine& operator=(const OcrRespond_OCRResultLine& from) {
    CopyFrom(from);
    return *this;
  }
  inline OcrRespond_OCRResultLine& operator=(OcrRespond_OCRResultLine&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const OcrRespond_OCRResultLine& default_instance() {
    return *internal_default_instance();
  }
  static inline const OcrRespond_OCRResultLine* internal_default_instance() {
    return reinterpret_cast<const OcrRespond_OCRResultLine*>(
               &_OcrRespond_OCRResultLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OcrRespond_OCRResultLine& a, OcrRespond_OCRResultLine& b) {
    a.Swap(&b);
  }
  inline void Swap(OcrRespond_OCRResultLine* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OcrRespond_OCRResultLine* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OcrRespond_OCRResultLine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OcrRespond_OCRResultLine>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const OcrRespond_OCRResultLine& from);
  void MergeFrom(const OcrRespond_OCRResultLine& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OcrRespond_OCRResultLine* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ocr_protobuf.OcrRespond.OCRResultLine";
  }
  protected:
  explicit OcrRespond_OCRResultLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlocksFieldNumber = 4,
    kTextFieldNumber = 2,
    kLineBoxFieldNumber = 1,
    kBox10FieldNumber = 10,
    kRateFieldNumber = 3,
    kLeftFieldNumber = 5,
    kTopFieldNumber = 6,
    kRightFieldNumber = 7,
    kBottomFieldNumber = 8,
    kUnknown0FieldNumber = 9,
  };
  // repeated .ocr_protobuf.OcrRespond.OCRResultChar blocks = 4;
  int blocks_size() const;
  private:
  int _internal_blocks_size() const;
  public:
  void clear_blocks();
  ::ocr_protobuf::OcrRespond_OCRResultChar* mutable_blocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ocr_protobuf::OcrRespond_OCRResultChar >*
      mutable_blocks();
  private:
  const ::ocr_protobuf::OcrRespond_OCRResultChar& _internal_blocks(int index) const;
  ::ocr_protobuf::OcrRespond_OCRResultChar* _internal_add_blocks();
  public:
  const ::ocr_protobuf::OcrRespond_OCRResultChar& blocks(int index) const;
  ::ocr_protobuf::OcrRespond_OCRResultChar* add_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ocr_protobuf::OcrRespond_OCRResultChar >&
      blocks() const;

  // string text = 2;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // .ocr_protobuf.OcrRespond.OcrBox line_box = 1;
  bool has_line_box() const;
  private:
  bool _internal_has_line_box() const;
  public:
  void clear_line_box();
  const ::ocr_protobuf::OcrRespond_OcrBox& line_box() const;
  PROTOBUF_NODISCARD ::ocr_protobuf::OcrRespond_OcrBox* release_line_box();
  ::ocr_protobuf::OcrRespond_OcrBox* mutable_line_box();
  void set_allocated_line_box(::ocr_protobuf::OcrRespond_OcrBox* line_box);
  private:
  const ::ocr_protobuf::OcrRespond_OcrBox& _internal_line_box() const;
  ::ocr_protobuf::OcrRespond_OcrBox* _internal_mutable_line_box();
  public:
  void unsafe_arena_set_allocated_line_box(
      ::ocr_protobuf::OcrRespond_OcrBox* line_box);
  ::ocr_protobuf::OcrRespond_OcrBox* unsafe_arena_release_line_box();

  // optional .ocr_protobuf.OcrRespond.OcrBox box10 = 10;
  bool has_box10() const;
  private:
  bool _internal_has_box10() const;
  public:
  void clear_box10();
  const ::ocr_protobuf::OcrRespond_OcrBox& box10() const;
  PROTOBUF_NODISCARD ::ocr_protobuf::OcrRespond_OcrBox* release_box10();
  ::ocr_protobuf::OcrRespond_OcrBox* mutable_box10();
  void set_allocated_box10(::ocr_protobuf::OcrRespond_OcrBox* box10);
  private:
  const ::ocr_protobuf::OcrRespond_OcrBox& _internal_box10() const;
  ::ocr_protobuf::OcrRespond_OcrBox* _internal_mutable_box10();
  public:
  void unsafe_arena_set_allocated_box10(
      ::ocr_protobuf::OcrRespond_OcrBox* box10);
  ::ocr_protobuf::OcrRespond_OcrBox* unsafe_arena_release_box10();

  // float rate = 3;
  void clear_rate();
  float rate() const;
  void set_rate(float value);
  private:
  float _internal_rate() const;
  void _internal_set_rate(float value);
  public:

  // float left = 5;
  void clear_left();
  float left() const;
  void set_left(float value);
  private:
  float _internal_left() const;
  void _internal_set_left(float value);
  public:

  // float top = 6;
  void clear_top();
  float top() const;
  void set_top(float value);
  private:
  float _internal_top() const;
  void _internal_set_top(float value);
  public:

  // float right = 7;
  void clear_right();
  float right() const;
  void set_right(float value);
  private:
  float _internal_right() const;
  void _internal_set_right(float value);
  public:

  // float bottom = 8;
  void clear_bottom();
  float bottom() const;
  void set_bottom(float value);
  private:
  float _internal_bottom() const;
  void _internal_set_bottom(float value);
  public:

  // optional bool unknown_0 = 9;
  bool has_unknown_0() const;
  private:
  bool _internal_has_unknown_0() const;
  public:
  void clear_unknown_0();
  bool unknown_0() const;
  void set_unknown_0(bool value);
  private:
  bool _internal_unknown_0() const;
  void _internal_set_unknown_0(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ocr_protobuf.OcrRespond.OCRResultLine)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ocr_protobuf::OcrRespond_OCRResultChar > blocks_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    ::ocr_protobuf::OcrRespond_OcrBox* line_box_;
    ::ocr_protobuf::OcrRespond_OcrBox* box10_;
    float rate_;
    float left_;
    float top_;
    float right_;
    float bottom_;
    bool unknown_0_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ocr_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class OcrRespond_OcrOutputBuffer final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ocr_protobuf.OcrRespond.OcrOutputBuffer) */ {
 public:
  inline OcrRespond_OcrOutputBuffer() : OcrRespond_OcrOutputBuffer(nullptr) {}
  ~OcrRespond_OcrOutputBuffer() override;
  explicit PROTOBUF_CONSTEXPR OcrRespond_OcrOutputBuffer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OcrRespond_OcrOutputBuffer(const OcrRespond_OcrOutputBuffer& from);
  OcrRespond_OcrOutputBuffer(OcrRespond_OcrOutputBuffer&& from) noexcept
    : OcrRespond_OcrOutputBuffer() {
    *this = ::std::move(from);
  }

  inline OcrRespond_OcrOutputBuffer& operator=(const OcrRespond_OcrOutputBuffer& from) {
    CopyFrom(from);
    return *this;
  }
  inline OcrRespond_OcrOutputBuffer& operator=(OcrRespond_OcrOutputBuffer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const OcrRespond_OcrOutputBuffer& default_instance() {
    return *internal_default_instance();
  }
  static inline const OcrRespond_OcrOutputBuffer* internal_default_instance() {
    return reinterpret_cast<const OcrRespond_OcrOutputBuffer*>(
               &_OcrRespond_OcrOutputBuffer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(OcrRespond_OcrOutputBuffer& a, OcrRespond_OcrOutputBuffer& b) {
    a.Swap(&b);
  }
  inline void Swap(OcrRespond_OcrOutputBuffer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OcrRespond_OcrOutputBuffer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OcrRespond_OcrOutputBuffer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OcrRespond_OcrOutputBuffer>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const OcrRespond_OcrOutputBuffer& from);
  void MergeFrom(const OcrRespond_OcrOutputBuffer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OcrRespond_OcrOutputBuffer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ocr_protobuf.OcrRespond.OcrOutputBuffer";
  }
  protected:
  explicit OcrRespond_OcrOutputBuffer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinesFieldNumber = 1,
    kUnk4FieldNumber = 4,
    kImgWidthFieldNumber = 2,
    kImgHeightFieldNumber = 3,
  };
  // repeated .ocr_protobuf.OcrRespond.OCRResultLine lines = 1;
  int lines_size() const;
  private:
  int _internal_lines_size() const;
  public:
  void clear_lines();
  ::ocr_protobuf::OcrRespond_OCRResultLine* mutable_lines(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ocr_protobuf::OcrRespond_OCRResultLine >*
      mutable_lines();
  private:
  const ::ocr_protobuf::OcrRespond_OCRResultLine& _internal_lines(int index) const;
  ::ocr_protobuf::OcrRespond_OCRResultLine* _internal_add_lines();
  public:
  const ::ocr_protobuf::OcrRespond_OCRResultLine& lines(int index) const;
  ::ocr_protobuf::OcrRespond_OCRResultLine* add_lines();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ocr_protobuf::OcrRespond_OCRResultLine >&
      lines() const;

  // optional string unk4 = 4;
  bool has_unk4() const;
  private:
  bool _internal_has_unk4() const;
  public:
  void clear_unk4();
  const std::string& unk4() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unk4(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unk4();
  PROTOBUF_NODISCARD std::string* release_unk4();
  void set_allocated_unk4(std::string* unk4);
  private:
  const std::string& _internal_unk4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unk4(const std::string& value);
  std::string* _internal_mutable_unk4();
  public:

  // optional uint32 img_width = 2;
  bool has_img_width() const;
  private:
  bool _internal_has_img_width() const;
  public:
  void clear_img_width();
  uint32_t img_width() const;
  void set_img_width(uint32_t value);
  private:
  uint32_t _internal_img_width() const;
  void _internal_set_img_width(uint32_t value);
  public:

  // optional uint32 img_height = 3;
  bool has_img_height() const;
  private:
  bool _internal_has_img_height() const;
  public:
  void clear_img_height();
  uint32_t img_height() const;
  void set_img_height(uint32_t value);
  private:
  uint32_t _internal_img_height() const;
  void _internal_set_img_height(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ocr_protobuf.OcrRespond.OcrOutputBuffer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ocr_protobuf::OcrRespond_OCRResultLine > lines_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unk4_;
    uint32_t img_width_;
    uint32_t img_height_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ocr_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class OcrRespond final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ocr_protobuf.OcrRespond) */ {
 public:
  inline OcrRespond() : OcrRespond(nullptr) {}
  ~OcrRespond() override;
  explicit PROTOBUF_CONSTEXPR OcrRespond(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OcrRespond(const OcrRespond& from);
  OcrRespond(OcrRespond&& from) noexcept
    : OcrRespond() {
    *this = ::std::move(from);
  }

  inline OcrRespond& operator=(const OcrRespond& from) {
    CopyFrom(from);
    return *this;
  }
  inline OcrRespond& operator=(OcrRespond&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const OcrRespond& default_instance() {
    return *internal_default_instance();
  }
  static inline const OcrRespond* internal_default_instance() {
    return reinterpret_cast<const OcrRespond*>(
               &_OcrRespond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(OcrRespond& a, OcrRespond& b) {
    a.Swap(&b);
  }
  inline void Swap(OcrRespond* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OcrRespond* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OcrRespond* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OcrRespond>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const OcrRespond& from);
  void MergeFrom(const OcrRespond& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OcrRespond* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ocr_protobuf.OcrRespond";
  }
  protected:
  explicit OcrRespond(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef OcrRespond_OcrBoxPoint OcrBoxPoint;
  typedef OcrRespond_OcrBox OcrBox;
  typedef OcrRespond_OCRResultChar OCRResultChar;
  typedef OcrRespond_OCRResultLine OCRResultLine;
  typedef OcrRespond_OcrOutputBuffer OcrOutputBuffer;

  // accessors -------------------------------------------------------

  enum : int {
    kOcrResultFieldNumber = 4,
    kTaskIdFieldNumber = 2,
    kTypeFieldNumber = 1,
    kErrCodeFieldNumber = 3,
  };
  // optional .ocr_protobuf.OcrRespond.OcrOutputBuffer ocr_result = 4;
  bool has_ocr_result() const;
  private:
  bool _internal_has_ocr_result() const;
  public:
  void clear_ocr_result();
  const ::ocr_protobuf::OcrRespond_OcrOutputBuffer& ocr_result() const;
  PROTOBUF_NODISCARD ::ocr_protobuf::OcrRespond_OcrOutputBuffer* release_ocr_result();
  ::ocr_protobuf::OcrRespond_OcrOutputBuffer* mutable_ocr_result();
  void set_allocated_ocr_result(::ocr_protobuf::OcrRespond_OcrOutputBuffer* ocr_result);
  private:
  const ::ocr_protobuf::OcrRespond_OcrOutputBuffer& _internal_ocr_result() const;
  ::ocr_protobuf::OcrRespond_OcrOutputBuffer* _internal_mutable_ocr_result();
  public:
  void unsafe_arena_set_allocated_ocr_result(
      ::ocr_protobuf::OcrRespond_OcrOutputBuffer* ocr_result);
  ::ocr_protobuf::OcrRespond_OcrOutputBuffer* unsafe_arena_release_ocr_result();

  // optional uint64 task_id = 2;
  bool has_task_id() const;
  private:
  bool _internal_has_task_id() const;
  public:
  void clear_task_id();
  uint64_t task_id() const;
  void set_task_id(uint64_t value);
  private:
  uint64_t _internal_task_id() const;
  void _internal_set_task_id(uint64_t value);
  public:

  // optional int32 type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // optional int32 err_code = 3;
  bool has_err_code() const;
  private:
  bool _internal_has_err_code() const;
  public:
  void clear_err_code();
  int32_t err_code() const;
  void set_err_code(int32_t value);
  private:
  int32_t _internal_err_code() const;
  void _internal_set_err_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ocr_protobuf.OcrRespond)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::ocr_protobuf::OcrRespond_OcrOutputBuffer* ocr_result_;
    uint64_t task_id_;
    int32_t type_;
    int32_t err_code_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ocr_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class OcrRequest_OcrInputBuffer final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ocr_protobuf.OcrRequest.OcrInputBuffer) */ {
 public:
  inline OcrRequest_OcrInputBuffer() : OcrRequest_OcrInputBuffer(nullptr) {}
  ~OcrRequest_OcrInputBuffer() override;
  explicit PROTOBUF_CONSTEXPR OcrRequest_OcrInputBuffer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OcrRequest_OcrInputBuffer(const OcrRequest_OcrInputBuffer& from);
  OcrRequest_OcrInputBuffer(OcrRequest_OcrInputBuffer&& from) noexcept
    : OcrRequest_OcrInputBuffer() {
    *this = ::std::move(from);
  }

  inline OcrRequest_OcrInputBuffer& operator=(const OcrRequest_OcrInputBuffer& from) {
    CopyFrom(from);
    return *this;
  }
  inline OcrRequest_OcrInputBuffer& operator=(OcrRequest_OcrInputBuffer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const OcrRequest_OcrInputBuffer& default_instance() {
    return *internal_default_instance();
  }
  static inline const OcrRequest_OcrInputBuffer* internal_default_instance() {
    return reinterpret_cast<const OcrRequest_OcrInputBuffer*>(
               &_OcrRequest_OcrInputBuffer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(OcrRequest_OcrInputBuffer& a, OcrRequest_OcrInputBuffer& b) {
    a.Swap(&b);
  }
  inline void Swap(OcrRequest_OcrInputBuffer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OcrRequest_OcrInputBuffer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OcrRequest_OcrInputBuffer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OcrRequest_OcrInputBuffer>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const OcrRequest_OcrInputBuffer& from);
  void MergeFrom(const OcrRequest_OcrInputBuffer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OcrRequest_OcrInputBuffer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ocr_protobuf.OcrRequest.OcrInputBuffer";
  }
  protected:
  explicit OcrRequest_OcrInputBuffer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPicPathFieldNumber = 1,
    kPicDataFieldNumber = 4,
    kU2FieldNumber = 2,
    kU3FieldNumber = 3,
  };
  // optional string pic_path = 1;
  bool has_pic_path() const;
  private:
  bool _internal_has_pic_path() const;
  public:
  void clear_pic_path();
  const std::string& pic_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pic_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pic_path();
  PROTOBUF_NODISCARD std::string* release_pic_path();
  void set_allocated_pic_path(std::string* pic_path);
  private:
  const std::string& _internal_pic_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pic_path(const std::string& value);
  std::string* _internal_mutable_pic_path();
  public:

  // optional bytes pic_data = 4;
  bool has_pic_data() const;
  private:
  bool _internal_has_pic_data() const;
  public:
  void clear_pic_data();
  const std::string& pic_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pic_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pic_data();
  PROTOBUF_NODISCARD std::string* release_pic_data();
  void set_allocated_pic_data(std::string* pic_data);
  private:
  const std::string& _internal_pic_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pic_data(const std::string& value);
  std::string* _internal_mutable_pic_data();
  public:

  // optional uint32 u2 = 2;
  bool has_u2() const;
  private:
  bool _internal_has_u2() const;
  public:
  void clear_u2();
  uint32_t u2() const;
  void set_u2(uint32_t value);
  private:
  uint32_t _internal_u2() const;
  void _internal_set_u2(uint32_t value);
  public:

  // optional uint32 u3 = 3;
  bool has_u3() const;
  private:
  bool _internal_has_u3() const;
  public:
  void clear_u3();
  uint32_t u3() const;
  void set_u3(uint32_t value);
  private:
  uint32_t _internal_u3() const;
  void _internal_set_u3(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ocr_protobuf.OcrRequest.OcrInputBuffer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pic_path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pic_data_;
    uint32_t u2_;
    uint32_t u3_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ocr_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class OcrRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ocr_protobuf.OcrRequest) */ {
 public:
  inline OcrRequest() : OcrRequest(nullptr) {}
  ~OcrRequest() override;
  explicit PROTOBUF_CONSTEXPR OcrRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OcrRequest(const OcrRequest& from);
  OcrRequest(OcrRequest&& from) noexcept
    : OcrRequest() {
    *this = ::std::move(from);
  }

  inline OcrRequest& operator=(const OcrRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OcrRequest& operator=(OcrRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const OcrRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OcrRequest* internal_default_instance() {
    return reinterpret_cast<const OcrRequest*>(
               &_OcrRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(OcrRequest& a, OcrRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OcrRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OcrRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OcrRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OcrRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const OcrRequest& from);
  void MergeFrom(const OcrRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OcrRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ocr_protobuf.OcrRequest";
  }
  protected:
  explicit OcrRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef OcrRequest_OcrInputBuffer OcrInputBuffer;

  // accessors -------------------------------------------------------

  enum : int {
    kInputFieldNumber = 3,
    kTaskIdFieldNumber = 2,
    kUnknowFieldNumber = 1,
  };
  // .ocr_protobuf.OcrRequest.OcrInputBuffer input = 3;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::ocr_protobuf::OcrRequest_OcrInputBuffer& input() const;
  PROTOBUF_NODISCARD ::ocr_protobuf::OcrRequest_OcrInputBuffer* release_input();
  ::ocr_protobuf::OcrRequest_OcrInputBuffer* mutable_input();
  void set_allocated_input(::ocr_protobuf::OcrRequest_OcrInputBuffer* input);
  private:
  const ::ocr_protobuf::OcrRequest_OcrInputBuffer& _internal_input() const;
  ::ocr_protobuf::OcrRequest_OcrInputBuffer* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::ocr_protobuf::OcrRequest_OcrInputBuffer* input);
  ::ocr_protobuf::OcrRequest_OcrInputBuffer* unsafe_arena_release_input();

  // uint64 task_id = 2;
  void clear_task_id();
  uint64_t task_id() const;
  void set_task_id(uint64_t value);
  private:
  uint64_t _internal_task_id() const;
  void _internal_set_task_id(uint64_t value);
  public:

  // int32 unknow = 1;
  void clear_unknow();
  int32_t unknow() const;
  void set_unknow(int32_t value);
  private:
  int32_t _internal_unknow() const;
  void _internal_set_unknow(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ocr_protobuf.OcrRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::ocr_protobuf::OcrRequest_OcrInputBuffer* input_;
    uint64_t task_id_;
    int32_t unknow_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ocr_5fprotobuf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OcrRespond_OcrBoxPoint

// optional float x = 1;
inline bool OcrRespond_OcrBoxPoint::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OcrRespond_OcrBoxPoint::has_x() const {
  return _internal_has_x();
}
inline void OcrRespond_OcrBoxPoint::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float OcrRespond_OcrBoxPoint::_internal_x() const {
  return _impl_.x_;
}
inline float OcrRespond_OcrBoxPoint::x() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrRespond.OcrBoxPoint.x)
  return _internal_x();
}
inline void OcrRespond_OcrBoxPoint::_internal_set_x(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.x_ = value;
}
inline void OcrRespond_OcrBoxPoint::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ocr_protobuf.OcrRespond.OcrBoxPoint.x)
}

// optional float y = 2;
inline bool OcrRespond_OcrBoxPoint::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OcrRespond_OcrBoxPoint::has_y() const {
  return _internal_has_y();
}
inline void OcrRespond_OcrBoxPoint::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float OcrRespond_OcrBoxPoint::_internal_y() const {
  return _impl_.y_;
}
inline float OcrRespond_OcrBoxPoint::y() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrRespond.OcrBoxPoint.y)
  return _internal_y();
}
inline void OcrRespond_OcrBoxPoint::_internal_set_y(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.y_ = value;
}
inline void OcrRespond_OcrBoxPoint::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ocr_protobuf.OcrRespond.OcrBoxPoint.y)
}

// -------------------------------------------------------------------

// OcrRespond_OcrBox

// optional .ocr_protobuf.OcrRespond.OcrBoxPoint topleft = 1;
inline bool OcrRespond_OcrBox::_internal_has_topleft() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.topleft_ != nullptr);
  return value;
}
inline bool OcrRespond_OcrBox::has_topleft() const {
  return _internal_has_topleft();
}
inline void OcrRespond_OcrBox::clear_topleft() {
  if (_impl_.topleft_ != nullptr) _impl_.topleft_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ocr_protobuf::OcrRespond_OcrBoxPoint& OcrRespond_OcrBox::_internal_topleft() const {
  const ::ocr_protobuf::OcrRespond_OcrBoxPoint* p = _impl_.topleft_;
  return p != nullptr ? *p : reinterpret_cast<const ::ocr_protobuf::OcrRespond_OcrBoxPoint&>(
      ::ocr_protobuf::_OcrRespond_OcrBoxPoint_default_instance_);
}
inline const ::ocr_protobuf::OcrRespond_OcrBoxPoint& OcrRespond_OcrBox::topleft() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrRespond.OcrBox.topleft)
  return _internal_topleft();
}
inline void OcrRespond_OcrBox::unsafe_arena_set_allocated_topleft(
    ::ocr_protobuf::OcrRespond_OcrBoxPoint* topleft) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.topleft_);
  }
  _impl_.topleft_ = topleft;
  if (topleft) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ocr_protobuf.OcrRespond.OcrBox.topleft)
}
inline ::ocr_protobuf::OcrRespond_OcrBoxPoint* OcrRespond_OcrBox::release_topleft() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ocr_protobuf::OcrRespond_OcrBoxPoint* temp = _impl_.topleft_;
  _impl_.topleft_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ocr_protobuf::OcrRespond_OcrBoxPoint* OcrRespond_OcrBox::unsafe_arena_release_topleft() {
  // @@protoc_insertion_point(field_release:ocr_protobuf.OcrRespond.OcrBox.topleft)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ocr_protobuf::OcrRespond_OcrBoxPoint* temp = _impl_.topleft_;
  _impl_.topleft_ = nullptr;
  return temp;
}
inline ::ocr_protobuf::OcrRespond_OcrBoxPoint* OcrRespond_OcrBox::_internal_mutable_topleft() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.topleft_ == nullptr) {
    auto* p = CreateMaybeMessage<::ocr_protobuf::OcrRespond_OcrBoxPoint>(GetArenaForAllocation());
    _impl_.topleft_ = p;
  }
  return _impl_.topleft_;
}
inline ::ocr_protobuf::OcrRespond_OcrBoxPoint* OcrRespond_OcrBox::mutable_topleft() {
  ::ocr_protobuf::OcrRespond_OcrBoxPoint* _msg = _internal_mutable_topleft();
  // @@protoc_insertion_point(field_mutable:ocr_protobuf.OcrRespond.OcrBox.topleft)
  return _msg;
}
inline void OcrRespond_OcrBox::set_allocated_topleft(::ocr_protobuf::OcrRespond_OcrBoxPoint* topleft) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.topleft_;
  }
  if (topleft) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(topleft);
    if (message_arena != submessage_arena) {
      topleft = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topleft, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.topleft_ = topleft;
  // @@protoc_insertion_point(field_set_allocated:ocr_protobuf.OcrRespond.OcrBox.topleft)
}

// optional .ocr_protobuf.OcrRespond.OcrBoxPoint topright = 2;
inline bool OcrRespond_OcrBox::_internal_has_topright() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.topright_ != nullptr);
  return value;
}
inline bool OcrRespond_OcrBox::has_topright() const {
  return _internal_has_topright();
}
inline void OcrRespond_OcrBox::clear_topright() {
  if (_impl_.topright_ != nullptr) _impl_.topright_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::ocr_protobuf::OcrRespond_OcrBoxPoint& OcrRespond_OcrBox::_internal_topright() const {
  const ::ocr_protobuf::OcrRespond_OcrBoxPoint* p = _impl_.topright_;
  return p != nullptr ? *p : reinterpret_cast<const ::ocr_protobuf::OcrRespond_OcrBoxPoint&>(
      ::ocr_protobuf::_OcrRespond_OcrBoxPoint_default_instance_);
}
inline const ::ocr_protobuf::OcrRespond_OcrBoxPoint& OcrRespond_OcrBox::topright() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrRespond.OcrBox.topright)
  return _internal_topright();
}
inline void OcrRespond_OcrBox::unsafe_arena_set_allocated_topright(
    ::ocr_protobuf::OcrRespond_OcrBoxPoint* topright) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.topright_);
  }
  _impl_.topright_ = topright;
  if (topright) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ocr_protobuf.OcrRespond.OcrBox.topright)
}
inline ::ocr_protobuf::OcrRespond_OcrBoxPoint* OcrRespond_OcrBox::release_topright() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ocr_protobuf::OcrRespond_OcrBoxPoint* temp = _impl_.topright_;
  _impl_.topright_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ocr_protobuf::OcrRespond_OcrBoxPoint* OcrRespond_OcrBox::unsafe_arena_release_topright() {
  // @@protoc_insertion_point(field_release:ocr_protobuf.OcrRespond.OcrBox.topright)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ocr_protobuf::OcrRespond_OcrBoxPoint* temp = _impl_.topright_;
  _impl_.topright_ = nullptr;
  return temp;
}
inline ::ocr_protobuf::OcrRespond_OcrBoxPoint* OcrRespond_OcrBox::_internal_mutable_topright() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.topright_ == nullptr) {
    auto* p = CreateMaybeMessage<::ocr_protobuf::OcrRespond_OcrBoxPoint>(GetArenaForAllocation());
    _impl_.topright_ = p;
  }
  return _impl_.topright_;
}
inline ::ocr_protobuf::OcrRespond_OcrBoxPoint* OcrRespond_OcrBox::mutable_topright() {
  ::ocr_protobuf::OcrRespond_OcrBoxPoint* _msg = _internal_mutable_topright();
  // @@protoc_insertion_point(field_mutable:ocr_protobuf.OcrRespond.OcrBox.topright)
  return _msg;
}
inline void OcrRespond_OcrBox::set_allocated_topright(::ocr_protobuf::OcrRespond_OcrBoxPoint* topright) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.topright_;
  }
  if (topright) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(topright);
    if (message_arena != submessage_arena) {
      topright = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topright, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.topright_ = topright;
  // @@protoc_insertion_point(field_set_allocated:ocr_protobuf.OcrRespond.OcrBox.topright)
}

// optional .ocr_protobuf.OcrRespond.OcrBoxPoint bottomright = 3;
inline bool OcrRespond_OcrBox::_internal_has_bottomright() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bottomright_ != nullptr);
  return value;
}
inline bool OcrRespond_OcrBox::has_bottomright() const {
  return _internal_has_bottomright();
}
inline void OcrRespond_OcrBox::clear_bottomright() {
  if (_impl_.bottomright_ != nullptr) _impl_.bottomright_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::ocr_protobuf::OcrRespond_OcrBoxPoint& OcrRespond_OcrBox::_internal_bottomright() const {
  const ::ocr_protobuf::OcrRespond_OcrBoxPoint* p = _impl_.bottomright_;
  return p != nullptr ? *p : reinterpret_cast<const ::ocr_protobuf::OcrRespond_OcrBoxPoint&>(
      ::ocr_protobuf::_OcrRespond_OcrBoxPoint_default_instance_);
}
inline const ::ocr_protobuf::OcrRespond_OcrBoxPoint& OcrRespond_OcrBox::bottomright() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrRespond.OcrBox.bottomright)
  return _internal_bottomright();
}
inline void OcrRespond_OcrBox::unsafe_arena_set_allocated_bottomright(
    ::ocr_protobuf::OcrRespond_OcrBoxPoint* bottomright) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bottomright_);
  }
  _impl_.bottomright_ = bottomright;
  if (bottomright) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ocr_protobuf.OcrRespond.OcrBox.bottomright)
}
inline ::ocr_protobuf::OcrRespond_OcrBoxPoint* OcrRespond_OcrBox::release_bottomright() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::ocr_protobuf::OcrRespond_OcrBoxPoint* temp = _impl_.bottomright_;
  _impl_.bottomright_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ocr_protobuf::OcrRespond_OcrBoxPoint* OcrRespond_OcrBox::unsafe_arena_release_bottomright() {
  // @@protoc_insertion_point(field_release:ocr_protobuf.OcrRespond.OcrBox.bottomright)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::ocr_protobuf::OcrRespond_OcrBoxPoint* temp = _impl_.bottomright_;
  _impl_.bottomright_ = nullptr;
  return temp;
}
inline ::ocr_protobuf::OcrRespond_OcrBoxPoint* OcrRespond_OcrBox::_internal_mutable_bottomright() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.bottomright_ == nullptr) {
    auto* p = CreateMaybeMessage<::ocr_protobuf::OcrRespond_OcrBoxPoint>(GetArenaForAllocation());
    _impl_.bottomright_ = p;
  }
  return _impl_.bottomright_;
}
inline ::ocr_protobuf::OcrRespond_OcrBoxPoint* OcrRespond_OcrBox::mutable_bottomright() {
  ::ocr_protobuf::OcrRespond_OcrBoxPoint* _msg = _internal_mutable_bottomright();
  // @@protoc_insertion_point(field_mutable:ocr_protobuf.OcrRespond.OcrBox.bottomright)
  return _msg;
}
inline void OcrRespond_OcrBox::set_allocated_bottomright(::ocr_protobuf::OcrRespond_OcrBoxPoint* bottomright) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bottomright_;
  }
  if (bottomright) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bottomright);
    if (message_arena != submessage_arena) {
      bottomright = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bottomright, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.bottomright_ = bottomright;
  // @@protoc_insertion_point(field_set_allocated:ocr_protobuf.OcrRespond.OcrBox.bottomright)
}

// optional .ocr_protobuf.OcrRespond.OcrBoxPoint bottomleft = 4;
inline bool OcrRespond_OcrBox::_internal_has_bottomleft() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bottomleft_ != nullptr);
  return value;
}
inline bool OcrRespond_OcrBox::has_bottomleft() const {
  return _internal_has_bottomleft();
}
inline void OcrRespond_OcrBox::clear_bottomleft() {
  if (_impl_.bottomleft_ != nullptr) _impl_.bottomleft_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::ocr_protobuf::OcrRespond_OcrBoxPoint& OcrRespond_OcrBox::_internal_bottomleft() const {
  const ::ocr_protobuf::OcrRespond_OcrBoxPoint* p = _impl_.bottomleft_;
  return p != nullptr ? *p : reinterpret_cast<const ::ocr_protobuf::OcrRespond_OcrBoxPoint&>(
      ::ocr_protobuf::_OcrRespond_OcrBoxPoint_default_instance_);
}
inline const ::ocr_protobuf::OcrRespond_OcrBoxPoint& OcrRespond_OcrBox::bottomleft() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrRespond.OcrBox.bottomleft)
  return _internal_bottomleft();
}
inline void OcrRespond_OcrBox::unsafe_arena_set_allocated_bottomleft(
    ::ocr_protobuf::OcrRespond_OcrBoxPoint* bottomleft) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bottomleft_);
  }
  _impl_.bottomleft_ = bottomleft;
  if (bottomleft) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ocr_protobuf.OcrRespond.OcrBox.bottomleft)
}
inline ::ocr_protobuf::OcrRespond_OcrBoxPoint* OcrRespond_OcrBox::release_bottomleft() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::ocr_protobuf::OcrRespond_OcrBoxPoint* temp = _impl_.bottomleft_;
  _impl_.bottomleft_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ocr_protobuf::OcrRespond_OcrBoxPoint* OcrRespond_OcrBox::unsafe_arena_release_bottomleft() {
  // @@protoc_insertion_point(field_release:ocr_protobuf.OcrRespond.OcrBox.bottomleft)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::ocr_protobuf::OcrRespond_OcrBoxPoint* temp = _impl_.bottomleft_;
  _impl_.bottomleft_ = nullptr;
  return temp;
}
inline ::ocr_protobuf::OcrRespond_OcrBoxPoint* OcrRespond_OcrBox::_internal_mutable_bottomleft() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.bottomleft_ == nullptr) {
    auto* p = CreateMaybeMessage<::ocr_protobuf::OcrRespond_OcrBoxPoint>(GetArenaForAllocation());
    _impl_.bottomleft_ = p;
  }
  return _impl_.bottomleft_;
}
inline ::ocr_protobuf::OcrRespond_OcrBoxPoint* OcrRespond_OcrBox::mutable_bottomleft() {
  ::ocr_protobuf::OcrRespond_OcrBoxPoint* _msg = _internal_mutable_bottomleft();
  // @@protoc_insertion_point(field_mutable:ocr_protobuf.OcrRespond.OcrBox.bottomleft)
  return _msg;
}
inline void OcrRespond_OcrBox::set_allocated_bottomleft(::ocr_protobuf::OcrRespond_OcrBoxPoint* bottomleft) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bottomleft_;
  }
  if (bottomleft) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bottomleft);
    if (message_arena != submessage_arena) {
      bottomleft = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bottomleft, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.bottomleft_ = bottomleft;
  // @@protoc_insertion_point(field_set_allocated:ocr_protobuf.OcrRespond.OcrBox.bottomleft)
}

// -------------------------------------------------------------------

// OcrRespond_OCRResultChar

// optional .ocr_protobuf.OcrRespond.OcrBox char_box = 1;
inline bool OcrRespond_OCRResultChar::_internal_has_char_box() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.char_box_ != nullptr);
  return value;
}
inline bool OcrRespond_OCRResultChar::has_char_box() const {
  return _internal_has_char_box();
}
inline void OcrRespond_OCRResultChar::clear_char_box() {
  if (_impl_.char_box_ != nullptr) _impl_.char_box_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::ocr_protobuf::OcrRespond_OcrBox& OcrRespond_OCRResultChar::_internal_char_box() const {
  const ::ocr_protobuf::OcrRespond_OcrBox* p = _impl_.char_box_;
  return p != nullptr ? *p : reinterpret_cast<const ::ocr_protobuf::OcrRespond_OcrBox&>(
      ::ocr_protobuf::_OcrRespond_OcrBox_default_instance_);
}
inline const ::ocr_protobuf::OcrRespond_OcrBox& OcrRespond_OCRResultChar::char_box() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrRespond.OCRResultChar.char_box)
  return _internal_char_box();
}
inline void OcrRespond_OCRResultChar::unsafe_arena_set_allocated_char_box(
    ::ocr_protobuf::OcrRespond_OcrBox* char_box) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.char_box_);
  }
  _impl_.char_box_ = char_box;
  if (char_box) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ocr_protobuf.OcrRespond.OCRResultChar.char_box)
}
inline ::ocr_protobuf::OcrRespond_OcrBox* OcrRespond_OCRResultChar::release_char_box() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ocr_protobuf::OcrRespond_OcrBox* temp = _impl_.char_box_;
  _impl_.char_box_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ocr_protobuf::OcrRespond_OcrBox* OcrRespond_OCRResultChar::unsafe_arena_release_char_box() {
  // @@protoc_insertion_point(field_release:ocr_protobuf.OcrRespond.OCRResultChar.char_box)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ocr_protobuf::OcrRespond_OcrBox* temp = _impl_.char_box_;
  _impl_.char_box_ = nullptr;
  return temp;
}
inline ::ocr_protobuf::OcrRespond_OcrBox* OcrRespond_OCRResultChar::_internal_mutable_char_box() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.char_box_ == nullptr) {
    auto* p = CreateMaybeMessage<::ocr_protobuf::OcrRespond_OcrBox>(GetArenaForAllocation());
    _impl_.char_box_ = p;
  }
  return _impl_.char_box_;
}
inline ::ocr_protobuf::OcrRespond_OcrBox* OcrRespond_OCRResultChar::mutable_char_box() {
  ::ocr_protobuf::OcrRespond_OcrBox* _msg = _internal_mutable_char_box();
  // @@protoc_insertion_point(field_mutable:ocr_protobuf.OcrRespond.OCRResultChar.char_box)
  return _msg;
}
inline void OcrRespond_OCRResultChar::set_allocated_char_box(::ocr_protobuf::OcrRespond_OcrBox* char_box) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.char_box_;
  }
  if (char_box) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(char_box);
    if (message_arena != submessage_arena) {
      char_box = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, char_box, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.char_box_ = char_box;
  // @@protoc_insertion_point(field_set_allocated:ocr_protobuf.OcrRespond.OCRResultChar.char_box)
}

// optional string chars = 2;
inline bool OcrRespond_OCRResultChar::_internal_has_chars() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OcrRespond_OCRResultChar::has_chars() const {
  return _internal_has_chars();
}
inline void OcrRespond_OCRResultChar::clear_chars() {
  _impl_.chars_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OcrRespond_OCRResultChar::chars() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrRespond.OCRResultChar.chars)
  return _internal_chars();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OcrRespond_OCRResultChar::set_chars(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.chars_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ocr_protobuf.OcrRespond.OCRResultChar.chars)
}
inline std::string* OcrRespond_OCRResultChar::mutable_chars() {
  std::string* _s = _internal_mutable_chars();
  // @@protoc_insertion_point(field_mutable:ocr_protobuf.OcrRespond.OCRResultChar.chars)
  return _s;
}
inline const std::string& OcrRespond_OCRResultChar::_internal_chars() const {
  return _impl_.chars_.Get();
}
inline void OcrRespond_OCRResultChar::_internal_set_chars(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.chars_.Set(value, GetArenaForAllocation());
}
inline std::string* OcrRespond_OCRResultChar::_internal_mutable_chars() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.chars_.Mutable(GetArenaForAllocation());
}
inline std::string* OcrRespond_OCRResultChar::release_chars() {
  // @@protoc_insertion_point(field_release:ocr_protobuf.OcrRespond.OCRResultChar.chars)
  if (!_internal_has_chars()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.chars_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.chars_.IsDefault()) {
    _impl_.chars_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void OcrRespond_OCRResultChar::set_allocated_chars(std::string* chars) {
  if (chars != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.chars_.SetAllocated(chars, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.chars_.IsDefault()) {
    _impl_.chars_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ocr_protobuf.OcrRespond.OCRResultChar.chars)
}

// -------------------------------------------------------------------

// OcrRespond_OCRResultLine

// .ocr_protobuf.OcrRespond.OcrBox line_box = 1;
inline bool OcrRespond_OCRResultLine::_internal_has_line_box() const {
  return this != internal_default_instance() && _impl_.line_box_ != nullptr;
}
inline bool OcrRespond_OCRResultLine::has_line_box() const {
  return _internal_has_line_box();
}
inline void OcrRespond_OCRResultLine::clear_line_box() {
  if (GetArenaForAllocation() == nullptr && _impl_.line_box_ != nullptr) {
    delete _impl_.line_box_;
  }
  _impl_.line_box_ = nullptr;
}
inline const ::ocr_protobuf::OcrRespond_OcrBox& OcrRespond_OCRResultLine::_internal_line_box() const {
  const ::ocr_protobuf::OcrRespond_OcrBox* p = _impl_.line_box_;
  return p != nullptr ? *p : reinterpret_cast<const ::ocr_protobuf::OcrRespond_OcrBox&>(
      ::ocr_protobuf::_OcrRespond_OcrBox_default_instance_);
}
inline const ::ocr_protobuf::OcrRespond_OcrBox& OcrRespond_OCRResultLine::line_box() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrRespond.OCRResultLine.line_box)
  return _internal_line_box();
}
inline void OcrRespond_OCRResultLine::unsafe_arena_set_allocated_line_box(
    ::ocr_protobuf::OcrRespond_OcrBox* line_box) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.line_box_);
  }
  _impl_.line_box_ = line_box;
  if (line_box) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ocr_protobuf.OcrRespond.OCRResultLine.line_box)
}
inline ::ocr_protobuf::OcrRespond_OcrBox* OcrRespond_OCRResultLine::release_line_box() {
  
  ::ocr_protobuf::OcrRespond_OcrBox* temp = _impl_.line_box_;
  _impl_.line_box_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ocr_protobuf::OcrRespond_OcrBox* OcrRespond_OCRResultLine::unsafe_arena_release_line_box() {
  // @@protoc_insertion_point(field_release:ocr_protobuf.OcrRespond.OCRResultLine.line_box)
  
  ::ocr_protobuf::OcrRespond_OcrBox* temp = _impl_.line_box_;
  _impl_.line_box_ = nullptr;
  return temp;
}
inline ::ocr_protobuf::OcrRespond_OcrBox* OcrRespond_OCRResultLine::_internal_mutable_line_box() {
  
  if (_impl_.line_box_ == nullptr) {
    auto* p = CreateMaybeMessage<::ocr_protobuf::OcrRespond_OcrBox>(GetArenaForAllocation());
    _impl_.line_box_ = p;
  }
  return _impl_.line_box_;
}
inline ::ocr_protobuf::OcrRespond_OcrBox* OcrRespond_OCRResultLine::mutable_line_box() {
  ::ocr_protobuf::OcrRespond_OcrBox* _msg = _internal_mutable_line_box();
  // @@protoc_insertion_point(field_mutable:ocr_protobuf.OcrRespond.OCRResultLine.line_box)
  return _msg;
}
inline void OcrRespond_OCRResultLine::set_allocated_line_box(::ocr_protobuf::OcrRespond_OcrBox* line_box) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.line_box_;
  }
  if (line_box) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(line_box);
    if (message_arena != submessage_arena) {
      line_box = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, line_box, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.line_box_ = line_box;
  // @@protoc_insertion_point(field_set_allocated:ocr_protobuf.OcrRespond.OCRResultLine.line_box)
}

// string text = 2;
inline void OcrRespond_OCRResultLine::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& OcrRespond_OCRResultLine::text() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrRespond.OCRResultLine.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OcrRespond_OCRResultLine::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ocr_protobuf.OcrRespond.OCRResultLine.text)
}
inline std::string* OcrRespond_OCRResultLine::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:ocr_protobuf.OcrRespond.OCRResultLine.text)
  return _s;
}
inline const std::string& OcrRespond_OCRResultLine::_internal_text() const {
  return _impl_.text_.Get();
}
inline void OcrRespond_OCRResultLine::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* OcrRespond_OCRResultLine::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* OcrRespond_OCRResultLine::release_text() {
  // @@protoc_insertion_point(field_release:ocr_protobuf.OcrRespond.OCRResultLine.text)
  return _impl_.text_.Release();
}
inline void OcrRespond_OCRResultLine::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ocr_protobuf.OcrRespond.OCRResultLine.text)
}

// float rate = 3;
inline void OcrRespond_OCRResultLine::clear_rate() {
  _impl_.rate_ = 0;
}
inline float OcrRespond_OCRResultLine::_internal_rate() const {
  return _impl_.rate_;
}
inline float OcrRespond_OCRResultLine::rate() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrRespond.OCRResultLine.rate)
  return _internal_rate();
}
inline void OcrRespond_OCRResultLine::_internal_set_rate(float value) {
  
  _impl_.rate_ = value;
}
inline void OcrRespond_OCRResultLine::set_rate(float value) {
  _internal_set_rate(value);
  // @@protoc_insertion_point(field_set:ocr_protobuf.OcrRespond.OCRResultLine.rate)
}

// repeated .ocr_protobuf.OcrRespond.OCRResultChar blocks = 4;
inline int OcrRespond_OCRResultLine::_internal_blocks_size() const {
  return _impl_.blocks_.size();
}
inline int OcrRespond_OCRResultLine::blocks_size() const {
  return _internal_blocks_size();
}
inline void OcrRespond_OCRResultLine::clear_blocks() {
  _impl_.blocks_.Clear();
}
inline ::ocr_protobuf::OcrRespond_OCRResultChar* OcrRespond_OCRResultLine::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:ocr_protobuf.OcrRespond.OCRResultLine.blocks)
  return _impl_.blocks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ocr_protobuf::OcrRespond_OCRResultChar >*
OcrRespond_OCRResultLine::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:ocr_protobuf.OcrRespond.OCRResultLine.blocks)
  return &_impl_.blocks_;
}
inline const ::ocr_protobuf::OcrRespond_OCRResultChar& OcrRespond_OCRResultLine::_internal_blocks(int index) const {
  return _impl_.blocks_.Get(index);
}
inline const ::ocr_protobuf::OcrRespond_OCRResultChar& OcrRespond_OCRResultLine::blocks(int index) const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrRespond.OCRResultLine.blocks)
  return _internal_blocks(index);
}
inline ::ocr_protobuf::OcrRespond_OCRResultChar* OcrRespond_OCRResultLine::_internal_add_blocks() {
  return _impl_.blocks_.Add();
}
inline ::ocr_protobuf::OcrRespond_OCRResultChar* OcrRespond_OCRResultLine::add_blocks() {
  ::ocr_protobuf::OcrRespond_OCRResultChar* _add = _internal_add_blocks();
  // @@protoc_insertion_point(field_add:ocr_protobuf.OcrRespond.OCRResultLine.blocks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ocr_protobuf::OcrRespond_OCRResultChar >&
OcrRespond_OCRResultLine::blocks() const {
  // @@protoc_insertion_point(field_list:ocr_protobuf.OcrRespond.OCRResultLine.blocks)
  return _impl_.blocks_;
}

// float left = 5;
inline void OcrRespond_OCRResultLine::clear_left() {
  _impl_.left_ = 0;
}
inline float OcrRespond_OCRResultLine::_internal_left() const {
  return _impl_.left_;
}
inline float OcrRespond_OCRResultLine::left() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrRespond.OCRResultLine.left)
  return _internal_left();
}
inline void OcrRespond_OCRResultLine::_internal_set_left(float value) {
  
  _impl_.left_ = value;
}
inline void OcrRespond_OCRResultLine::set_left(float value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:ocr_protobuf.OcrRespond.OCRResultLine.left)
}

// float top = 6;
inline void OcrRespond_OCRResultLine::clear_top() {
  _impl_.top_ = 0;
}
inline float OcrRespond_OCRResultLine::_internal_top() const {
  return _impl_.top_;
}
inline float OcrRespond_OCRResultLine::top() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrRespond.OCRResultLine.top)
  return _internal_top();
}
inline void OcrRespond_OCRResultLine::_internal_set_top(float value) {
  
  _impl_.top_ = value;
}
inline void OcrRespond_OCRResultLine::set_top(float value) {
  _internal_set_top(value);
  // @@protoc_insertion_point(field_set:ocr_protobuf.OcrRespond.OCRResultLine.top)
}

// float right = 7;
inline void OcrRespond_OCRResultLine::clear_right() {
  _impl_.right_ = 0;
}
inline float OcrRespond_OCRResultLine::_internal_right() const {
  return _impl_.right_;
}
inline float OcrRespond_OCRResultLine::right() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrRespond.OCRResultLine.right)
  return _internal_right();
}
inline void OcrRespond_OCRResultLine::_internal_set_right(float value) {
  
  _impl_.right_ = value;
}
inline void OcrRespond_OCRResultLine::set_right(float value) {
  _internal_set_right(value);
  // @@protoc_insertion_point(field_set:ocr_protobuf.OcrRespond.OCRResultLine.right)
}

// float bottom = 8;
inline void OcrRespond_OCRResultLine::clear_bottom() {
  _impl_.bottom_ = 0;
}
inline float OcrRespond_OCRResultLine::_internal_bottom() const {
  return _impl_.bottom_;
}
inline float OcrRespond_OCRResultLine::bottom() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrRespond.OCRResultLine.bottom)
  return _internal_bottom();
}
inline void OcrRespond_OCRResultLine::_internal_set_bottom(float value) {
  
  _impl_.bottom_ = value;
}
inline void OcrRespond_OCRResultLine::set_bottom(float value) {
  _internal_set_bottom(value);
  // @@protoc_insertion_point(field_set:ocr_protobuf.OcrRespond.OCRResultLine.bottom)
}

// optional bool unknown_0 = 9;
inline bool OcrRespond_OCRResultLine::_internal_has_unknown_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OcrRespond_OCRResultLine::has_unknown_0() const {
  return _internal_has_unknown_0();
}
inline void OcrRespond_OCRResultLine::clear_unknown_0() {
  _impl_.unknown_0_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool OcrRespond_OCRResultLine::_internal_unknown_0() const {
  return _impl_.unknown_0_;
}
inline bool OcrRespond_OCRResultLine::unknown_0() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrRespond.OCRResultLine.unknown_0)
  return _internal_unknown_0();
}
inline void OcrRespond_OCRResultLine::_internal_set_unknown_0(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.unknown_0_ = value;
}
inline void OcrRespond_OCRResultLine::set_unknown_0(bool value) {
  _internal_set_unknown_0(value);
  // @@protoc_insertion_point(field_set:ocr_protobuf.OcrRespond.OCRResultLine.unknown_0)
}

// optional .ocr_protobuf.OcrRespond.OcrBox box10 = 10;
inline bool OcrRespond_OCRResultLine::_internal_has_box10() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.box10_ != nullptr);
  return value;
}
inline bool OcrRespond_OCRResultLine::has_box10() const {
  return _internal_has_box10();
}
inline void OcrRespond_OCRResultLine::clear_box10() {
  if (_impl_.box10_ != nullptr) _impl_.box10_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ocr_protobuf::OcrRespond_OcrBox& OcrRespond_OCRResultLine::_internal_box10() const {
  const ::ocr_protobuf::OcrRespond_OcrBox* p = _impl_.box10_;
  return p != nullptr ? *p : reinterpret_cast<const ::ocr_protobuf::OcrRespond_OcrBox&>(
      ::ocr_protobuf::_OcrRespond_OcrBox_default_instance_);
}
inline const ::ocr_protobuf::OcrRespond_OcrBox& OcrRespond_OCRResultLine::box10() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrRespond.OCRResultLine.box10)
  return _internal_box10();
}
inline void OcrRespond_OCRResultLine::unsafe_arena_set_allocated_box10(
    ::ocr_protobuf::OcrRespond_OcrBox* box10) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.box10_);
  }
  _impl_.box10_ = box10;
  if (box10) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ocr_protobuf.OcrRespond.OCRResultLine.box10)
}
inline ::ocr_protobuf::OcrRespond_OcrBox* OcrRespond_OCRResultLine::release_box10() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ocr_protobuf::OcrRespond_OcrBox* temp = _impl_.box10_;
  _impl_.box10_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ocr_protobuf::OcrRespond_OcrBox* OcrRespond_OCRResultLine::unsafe_arena_release_box10() {
  // @@protoc_insertion_point(field_release:ocr_protobuf.OcrRespond.OCRResultLine.box10)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ocr_protobuf::OcrRespond_OcrBox* temp = _impl_.box10_;
  _impl_.box10_ = nullptr;
  return temp;
}
inline ::ocr_protobuf::OcrRespond_OcrBox* OcrRespond_OCRResultLine::_internal_mutable_box10() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.box10_ == nullptr) {
    auto* p = CreateMaybeMessage<::ocr_protobuf::OcrRespond_OcrBox>(GetArenaForAllocation());
    _impl_.box10_ = p;
  }
  return _impl_.box10_;
}
inline ::ocr_protobuf::OcrRespond_OcrBox* OcrRespond_OCRResultLine::mutable_box10() {
  ::ocr_protobuf::OcrRespond_OcrBox* _msg = _internal_mutable_box10();
  // @@protoc_insertion_point(field_mutable:ocr_protobuf.OcrRespond.OCRResultLine.box10)
  return _msg;
}
inline void OcrRespond_OCRResultLine::set_allocated_box10(::ocr_protobuf::OcrRespond_OcrBox* box10) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.box10_;
  }
  if (box10) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(box10);
    if (message_arena != submessage_arena) {
      box10 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, box10, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.box10_ = box10;
  // @@protoc_insertion_point(field_set_allocated:ocr_protobuf.OcrRespond.OCRResultLine.box10)
}

// -------------------------------------------------------------------

// OcrRespond_OcrOutputBuffer

// repeated .ocr_protobuf.OcrRespond.OCRResultLine lines = 1;
inline int OcrRespond_OcrOutputBuffer::_internal_lines_size() const {
  return _impl_.lines_.size();
}
inline int OcrRespond_OcrOutputBuffer::lines_size() const {
  return _internal_lines_size();
}
inline void OcrRespond_OcrOutputBuffer::clear_lines() {
  _impl_.lines_.Clear();
}
inline ::ocr_protobuf::OcrRespond_OCRResultLine* OcrRespond_OcrOutputBuffer::mutable_lines(int index) {
  // @@protoc_insertion_point(field_mutable:ocr_protobuf.OcrRespond.OcrOutputBuffer.lines)
  return _impl_.lines_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ocr_protobuf::OcrRespond_OCRResultLine >*
OcrRespond_OcrOutputBuffer::mutable_lines() {
  // @@protoc_insertion_point(field_mutable_list:ocr_protobuf.OcrRespond.OcrOutputBuffer.lines)
  return &_impl_.lines_;
}
inline const ::ocr_protobuf::OcrRespond_OCRResultLine& OcrRespond_OcrOutputBuffer::_internal_lines(int index) const {
  return _impl_.lines_.Get(index);
}
inline const ::ocr_protobuf::OcrRespond_OCRResultLine& OcrRespond_OcrOutputBuffer::lines(int index) const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrRespond.OcrOutputBuffer.lines)
  return _internal_lines(index);
}
inline ::ocr_protobuf::OcrRespond_OCRResultLine* OcrRespond_OcrOutputBuffer::_internal_add_lines() {
  return _impl_.lines_.Add();
}
inline ::ocr_protobuf::OcrRespond_OCRResultLine* OcrRespond_OcrOutputBuffer::add_lines() {
  ::ocr_protobuf::OcrRespond_OCRResultLine* _add = _internal_add_lines();
  // @@protoc_insertion_point(field_add:ocr_protobuf.OcrRespond.OcrOutputBuffer.lines)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ocr_protobuf::OcrRespond_OCRResultLine >&
OcrRespond_OcrOutputBuffer::lines() const {
  // @@protoc_insertion_point(field_list:ocr_protobuf.OcrRespond.OcrOutputBuffer.lines)
  return _impl_.lines_;
}

// optional uint32 img_width = 2;
inline bool OcrRespond_OcrOutputBuffer::_internal_has_img_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OcrRespond_OcrOutputBuffer::has_img_width() const {
  return _internal_has_img_width();
}
inline void OcrRespond_OcrOutputBuffer::clear_img_width() {
  _impl_.img_width_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t OcrRespond_OcrOutputBuffer::_internal_img_width() const {
  return _impl_.img_width_;
}
inline uint32_t OcrRespond_OcrOutputBuffer::img_width() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrRespond.OcrOutputBuffer.img_width)
  return _internal_img_width();
}
inline void OcrRespond_OcrOutputBuffer::_internal_set_img_width(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.img_width_ = value;
}
inline void OcrRespond_OcrOutputBuffer::set_img_width(uint32_t value) {
  _internal_set_img_width(value);
  // @@protoc_insertion_point(field_set:ocr_protobuf.OcrRespond.OcrOutputBuffer.img_width)
}

// optional uint32 img_height = 3;
inline bool OcrRespond_OcrOutputBuffer::_internal_has_img_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OcrRespond_OcrOutputBuffer::has_img_height() const {
  return _internal_has_img_height();
}
inline void OcrRespond_OcrOutputBuffer::clear_img_height() {
  _impl_.img_height_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t OcrRespond_OcrOutputBuffer::_internal_img_height() const {
  return _impl_.img_height_;
}
inline uint32_t OcrRespond_OcrOutputBuffer::img_height() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrRespond.OcrOutputBuffer.img_height)
  return _internal_img_height();
}
inline void OcrRespond_OcrOutputBuffer::_internal_set_img_height(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.img_height_ = value;
}
inline void OcrRespond_OcrOutputBuffer::set_img_height(uint32_t value) {
  _internal_set_img_height(value);
  // @@protoc_insertion_point(field_set:ocr_protobuf.OcrRespond.OcrOutputBuffer.img_height)
}

// optional string unk4 = 4;
inline bool OcrRespond_OcrOutputBuffer::_internal_has_unk4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OcrRespond_OcrOutputBuffer::has_unk4() const {
  return _internal_has_unk4();
}
inline void OcrRespond_OcrOutputBuffer::clear_unk4() {
  _impl_.unk4_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OcrRespond_OcrOutputBuffer::unk4() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrRespond.OcrOutputBuffer.unk4)
  return _internal_unk4();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OcrRespond_OcrOutputBuffer::set_unk4(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.unk4_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ocr_protobuf.OcrRespond.OcrOutputBuffer.unk4)
}
inline std::string* OcrRespond_OcrOutputBuffer::mutable_unk4() {
  std::string* _s = _internal_mutable_unk4();
  // @@protoc_insertion_point(field_mutable:ocr_protobuf.OcrRespond.OcrOutputBuffer.unk4)
  return _s;
}
inline const std::string& OcrRespond_OcrOutputBuffer::_internal_unk4() const {
  return _impl_.unk4_.Get();
}
inline void OcrRespond_OcrOutputBuffer::_internal_set_unk4(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.unk4_.Set(value, GetArenaForAllocation());
}
inline std::string* OcrRespond_OcrOutputBuffer::_internal_mutable_unk4() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.unk4_.Mutable(GetArenaForAllocation());
}
inline std::string* OcrRespond_OcrOutputBuffer::release_unk4() {
  // @@protoc_insertion_point(field_release:ocr_protobuf.OcrRespond.OcrOutputBuffer.unk4)
  if (!_internal_has_unk4()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.unk4_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.unk4_.IsDefault()) {
    _impl_.unk4_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void OcrRespond_OcrOutputBuffer::set_allocated_unk4(std::string* unk4) {
  if (unk4 != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.unk4_.SetAllocated(unk4, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.unk4_.IsDefault()) {
    _impl_.unk4_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ocr_protobuf.OcrRespond.OcrOutputBuffer.unk4)
}

// -------------------------------------------------------------------

// OcrRespond

// optional int32 type = 1;
inline bool OcrRespond::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OcrRespond::has_type() const {
  return _internal_has_type();
}
inline void OcrRespond::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t OcrRespond::_internal_type() const {
  return _impl_.type_;
}
inline int32_t OcrRespond::type() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrRespond.type)
  return _internal_type();
}
inline void OcrRespond::_internal_set_type(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.type_ = value;
}
inline void OcrRespond::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ocr_protobuf.OcrRespond.type)
}

// optional uint64 task_id = 2;
inline bool OcrRespond::_internal_has_task_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OcrRespond::has_task_id() const {
  return _internal_has_task_id();
}
inline void OcrRespond::clear_task_id() {
  _impl_.task_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t OcrRespond::_internal_task_id() const {
  return _impl_.task_id_;
}
inline uint64_t OcrRespond::task_id() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrRespond.task_id)
  return _internal_task_id();
}
inline void OcrRespond::_internal_set_task_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.task_id_ = value;
}
inline void OcrRespond::set_task_id(uint64_t value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:ocr_protobuf.OcrRespond.task_id)
}

// optional int32 err_code = 3;
inline bool OcrRespond::_internal_has_err_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool OcrRespond::has_err_code() const {
  return _internal_has_err_code();
}
inline void OcrRespond::clear_err_code() {
  _impl_.err_code_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t OcrRespond::_internal_err_code() const {
  return _impl_.err_code_;
}
inline int32_t OcrRespond::err_code() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrRespond.err_code)
  return _internal_err_code();
}
inline void OcrRespond::_internal_set_err_code(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.err_code_ = value;
}
inline void OcrRespond::set_err_code(int32_t value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:ocr_protobuf.OcrRespond.err_code)
}

// optional .ocr_protobuf.OcrRespond.OcrOutputBuffer ocr_result = 4;
inline bool OcrRespond::_internal_has_ocr_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ocr_result_ != nullptr);
  return value;
}
inline bool OcrRespond::has_ocr_result() const {
  return _internal_has_ocr_result();
}
inline void OcrRespond::clear_ocr_result() {
  if (_impl_.ocr_result_ != nullptr) _impl_.ocr_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ocr_protobuf::OcrRespond_OcrOutputBuffer& OcrRespond::_internal_ocr_result() const {
  const ::ocr_protobuf::OcrRespond_OcrOutputBuffer* p = _impl_.ocr_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::ocr_protobuf::OcrRespond_OcrOutputBuffer&>(
      ::ocr_protobuf::_OcrRespond_OcrOutputBuffer_default_instance_);
}
inline const ::ocr_protobuf::OcrRespond_OcrOutputBuffer& OcrRespond::ocr_result() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrRespond.ocr_result)
  return _internal_ocr_result();
}
inline void OcrRespond::unsafe_arena_set_allocated_ocr_result(
    ::ocr_protobuf::OcrRespond_OcrOutputBuffer* ocr_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ocr_result_);
  }
  _impl_.ocr_result_ = ocr_result;
  if (ocr_result) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ocr_protobuf.OcrRespond.ocr_result)
}
inline ::ocr_protobuf::OcrRespond_OcrOutputBuffer* OcrRespond::release_ocr_result() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ocr_protobuf::OcrRespond_OcrOutputBuffer* temp = _impl_.ocr_result_;
  _impl_.ocr_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ocr_protobuf::OcrRespond_OcrOutputBuffer* OcrRespond::unsafe_arena_release_ocr_result() {
  // @@protoc_insertion_point(field_release:ocr_protobuf.OcrRespond.ocr_result)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ocr_protobuf::OcrRespond_OcrOutputBuffer* temp = _impl_.ocr_result_;
  _impl_.ocr_result_ = nullptr;
  return temp;
}
inline ::ocr_protobuf::OcrRespond_OcrOutputBuffer* OcrRespond::_internal_mutable_ocr_result() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.ocr_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::ocr_protobuf::OcrRespond_OcrOutputBuffer>(GetArenaForAllocation());
    _impl_.ocr_result_ = p;
  }
  return _impl_.ocr_result_;
}
inline ::ocr_protobuf::OcrRespond_OcrOutputBuffer* OcrRespond::mutable_ocr_result() {
  ::ocr_protobuf::OcrRespond_OcrOutputBuffer* _msg = _internal_mutable_ocr_result();
  // @@protoc_insertion_point(field_mutable:ocr_protobuf.OcrRespond.ocr_result)
  return _msg;
}
inline void OcrRespond::set_allocated_ocr_result(::ocr_protobuf::OcrRespond_OcrOutputBuffer* ocr_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ocr_result_;
  }
  if (ocr_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ocr_result);
    if (message_arena != submessage_arena) {
      ocr_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ocr_result, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ocr_result_ = ocr_result;
  // @@protoc_insertion_point(field_set_allocated:ocr_protobuf.OcrRespond.ocr_result)
}

// -------------------------------------------------------------------

// OcrRequest_OcrInputBuffer

// optional string pic_path = 1;
inline bool OcrRequest_OcrInputBuffer::_internal_has_pic_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OcrRequest_OcrInputBuffer::has_pic_path() const {
  return _internal_has_pic_path();
}
inline void OcrRequest_OcrInputBuffer::clear_pic_path() {
  _impl_.pic_path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OcrRequest_OcrInputBuffer::pic_path() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrRequest.OcrInputBuffer.pic_path)
  return _internal_pic_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OcrRequest_OcrInputBuffer::set_pic_path(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.pic_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ocr_protobuf.OcrRequest.OcrInputBuffer.pic_path)
}
inline std::string* OcrRequest_OcrInputBuffer::mutable_pic_path() {
  std::string* _s = _internal_mutable_pic_path();
  // @@protoc_insertion_point(field_mutable:ocr_protobuf.OcrRequest.OcrInputBuffer.pic_path)
  return _s;
}
inline const std::string& OcrRequest_OcrInputBuffer::_internal_pic_path() const {
  return _impl_.pic_path_.Get();
}
inline void OcrRequest_OcrInputBuffer::_internal_set_pic_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pic_path_.Set(value, GetArenaForAllocation());
}
inline std::string* OcrRequest_OcrInputBuffer::_internal_mutable_pic_path() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.pic_path_.Mutable(GetArenaForAllocation());
}
inline std::string* OcrRequest_OcrInputBuffer::release_pic_path() {
  // @@protoc_insertion_point(field_release:ocr_protobuf.OcrRequest.OcrInputBuffer.pic_path)
  if (!_internal_has_pic_path()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.pic_path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pic_path_.IsDefault()) {
    _impl_.pic_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void OcrRequest_OcrInputBuffer::set_allocated_pic_path(std::string* pic_path) {
  if (pic_path != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pic_path_.SetAllocated(pic_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pic_path_.IsDefault()) {
    _impl_.pic_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ocr_protobuf.OcrRequest.OcrInputBuffer.pic_path)
}

// optional uint32 u2 = 2;
inline bool OcrRequest_OcrInputBuffer::_internal_has_u2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OcrRequest_OcrInputBuffer::has_u2() const {
  return _internal_has_u2();
}
inline void OcrRequest_OcrInputBuffer::clear_u2() {
  _impl_.u2_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t OcrRequest_OcrInputBuffer::_internal_u2() const {
  return _impl_.u2_;
}
inline uint32_t OcrRequest_OcrInputBuffer::u2() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrRequest.OcrInputBuffer.u2)
  return _internal_u2();
}
inline void OcrRequest_OcrInputBuffer::_internal_set_u2(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.u2_ = value;
}
inline void OcrRequest_OcrInputBuffer::set_u2(uint32_t value) {
  _internal_set_u2(value);
  // @@protoc_insertion_point(field_set:ocr_protobuf.OcrRequest.OcrInputBuffer.u2)
}

// optional uint32 u3 = 3;
inline bool OcrRequest_OcrInputBuffer::_internal_has_u3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool OcrRequest_OcrInputBuffer::has_u3() const {
  return _internal_has_u3();
}
inline void OcrRequest_OcrInputBuffer::clear_u3() {
  _impl_.u3_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t OcrRequest_OcrInputBuffer::_internal_u3() const {
  return _impl_.u3_;
}
inline uint32_t OcrRequest_OcrInputBuffer::u3() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrRequest.OcrInputBuffer.u3)
  return _internal_u3();
}
inline void OcrRequest_OcrInputBuffer::_internal_set_u3(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.u3_ = value;
}
inline void OcrRequest_OcrInputBuffer::set_u3(uint32_t value) {
  _internal_set_u3(value);
  // @@protoc_insertion_point(field_set:ocr_protobuf.OcrRequest.OcrInputBuffer.u3)
}

// optional bytes pic_data = 4;
inline bool OcrRequest_OcrInputBuffer::_internal_has_pic_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OcrRequest_OcrInputBuffer::has_pic_data() const {
  return _internal_has_pic_data();
}
inline void OcrRequest_OcrInputBuffer::clear_pic_data() {
  _impl_.pic_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& OcrRequest_OcrInputBuffer::pic_data() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrRequest.OcrInputBuffer.pic_data)
  return _internal_pic_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OcrRequest_OcrInputBuffer::set_pic_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.pic_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ocr_protobuf.OcrRequest.OcrInputBuffer.pic_data)
}
inline std::string* OcrRequest_OcrInputBuffer::mutable_pic_data() {
  std::string* _s = _internal_mutable_pic_data();
  // @@protoc_insertion_point(field_mutable:ocr_protobuf.OcrRequest.OcrInputBuffer.pic_data)
  return _s;
}
inline const std::string& OcrRequest_OcrInputBuffer::_internal_pic_data() const {
  return _impl_.pic_data_.Get();
}
inline void OcrRequest_OcrInputBuffer::_internal_set_pic_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.pic_data_.Set(value, GetArenaForAllocation());
}
inline std::string* OcrRequest_OcrInputBuffer::_internal_mutable_pic_data() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.pic_data_.Mutable(GetArenaForAllocation());
}
inline std::string* OcrRequest_OcrInputBuffer::release_pic_data() {
  // @@protoc_insertion_point(field_release:ocr_protobuf.OcrRequest.OcrInputBuffer.pic_data)
  if (!_internal_has_pic_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.pic_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pic_data_.IsDefault()) {
    _impl_.pic_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void OcrRequest_OcrInputBuffer::set_allocated_pic_data(std::string* pic_data) {
  if (pic_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.pic_data_.SetAllocated(pic_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pic_data_.IsDefault()) {
    _impl_.pic_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ocr_protobuf.OcrRequest.OcrInputBuffer.pic_data)
}

// -------------------------------------------------------------------

// OcrRequest

// int32 unknow = 1;
inline void OcrRequest::clear_unknow() {
  _impl_.unknow_ = 0;
}
inline int32_t OcrRequest::_internal_unknow() const {
  return _impl_.unknow_;
}
inline int32_t OcrRequest::unknow() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrRequest.unknow)
  return _internal_unknow();
}
inline void OcrRequest::_internal_set_unknow(int32_t value) {
  
  _impl_.unknow_ = value;
}
inline void OcrRequest::set_unknow(int32_t value) {
  _internal_set_unknow(value);
  // @@protoc_insertion_point(field_set:ocr_protobuf.OcrRequest.unknow)
}

// uint64 task_id = 2;
inline void OcrRequest::clear_task_id() {
  _impl_.task_id_ = uint64_t{0u};
}
inline uint64_t OcrRequest::_internal_task_id() const {
  return _impl_.task_id_;
}
inline uint64_t OcrRequest::task_id() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrRequest.task_id)
  return _internal_task_id();
}
inline void OcrRequest::_internal_set_task_id(uint64_t value) {
  
  _impl_.task_id_ = value;
}
inline void OcrRequest::set_task_id(uint64_t value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:ocr_protobuf.OcrRequest.task_id)
}

// .ocr_protobuf.OcrRequest.OcrInputBuffer input = 3;
inline bool OcrRequest::_internal_has_input() const {
  return this != internal_default_instance() && _impl_.input_ != nullptr;
}
inline bool OcrRequest::has_input() const {
  return _internal_has_input();
}
inline void OcrRequest::clear_input() {
  if (GetArenaForAllocation() == nullptr && _impl_.input_ != nullptr) {
    delete _impl_.input_;
  }
  _impl_.input_ = nullptr;
}
inline const ::ocr_protobuf::OcrRequest_OcrInputBuffer& OcrRequest::_internal_input() const {
  const ::ocr_protobuf::OcrRequest_OcrInputBuffer* p = _impl_.input_;
  return p != nullptr ? *p : reinterpret_cast<const ::ocr_protobuf::OcrRequest_OcrInputBuffer&>(
      ::ocr_protobuf::_OcrRequest_OcrInputBuffer_default_instance_);
}
inline const ::ocr_protobuf::OcrRequest_OcrInputBuffer& OcrRequest::input() const {
  // @@protoc_insertion_point(field_get:ocr_protobuf.OcrRequest.input)
  return _internal_input();
}
inline void OcrRequest::unsafe_arena_set_allocated_input(
    ::ocr_protobuf::OcrRequest_OcrInputBuffer* input) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.input_);
  }
  _impl_.input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ocr_protobuf.OcrRequest.input)
}
inline ::ocr_protobuf::OcrRequest_OcrInputBuffer* OcrRequest::release_input() {
  
  ::ocr_protobuf::OcrRequest_OcrInputBuffer* temp = _impl_.input_;
  _impl_.input_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ocr_protobuf::OcrRequest_OcrInputBuffer* OcrRequest::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:ocr_protobuf.OcrRequest.input)
  
  ::ocr_protobuf::OcrRequest_OcrInputBuffer* temp = _impl_.input_;
  _impl_.input_ = nullptr;
  return temp;
}
inline ::ocr_protobuf::OcrRequest_OcrInputBuffer* OcrRequest::_internal_mutable_input() {
  
  if (_impl_.input_ == nullptr) {
    auto* p = CreateMaybeMessage<::ocr_protobuf::OcrRequest_OcrInputBuffer>(GetArenaForAllocation());
    _impl_.input_ = p;
  }
  return _impl_.input_;
}
inline ::ocr_protobuf::OcrRequest_OcrInputBuffer* OcrRequest::mutable_input() {
  ::ocr_protobuf::OcrRequest_OcrInputBuffer* _msg = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:ocr_protobuf.OcrRequest.input)
  return _msg;
}
inline void OcrRequest::set_allocated_input(::ocr_protobuf::OcrRequest_OcrInputBuffer* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.input_ = input;
  // @@protoc_insertion_point(field_set_allocated:ocr_protobuf.OcrRequest.input)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ocr_protobuf

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ocr_5fprotobuf_2eproto
